	.TITLE	progarg - General command argument processor for XOS
	.SBTTL	Cloned from procarg

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

        .INCLUD XOSINC:\XMAC\XOS.PAR
        .INCLUD XOSINC:\XMAC\XOSERR.PAR
        .INCLUD XOSINC:\XMAC\CTYPE.PAR
        .INCLUD XOSINC:\XMAC\STDIO.PAR
        .INCLUD XOSINC:\XMAC\PROGARG.PAR

	.STDSEGS

;Define data block for keeping track of indirect files

$$$=!0
BLK ifb_previous, 4t	;Pointer to previous IFB
BLK ifb_stream  , 4t	;Pointer to IO stream
BLK ifb_point   , 4t	;Pointer to next character
BLK ifb_buffer  , 512t	;Line buffer
ifb_SIZE=!$$$

	.PSECT	_DATA_p

rstr:	.ASCII	"r"
nullstr:.BYTE	0
optstr:	.ASCIZ	"option"
keystr:	.ASCIZ	"keyword"
eocf:	.ASCIZ	"Error opening command file %.40s"
unexfmt:.ASCIZ	"Unexpected argument ""%.40s"""
iokwfmt:.ASCIZ	"Illegal %s ""%s"" specified"
nvgfmt:	.ASCIZ	"No value given for %s %.32s"
unxvfmt:.ASCIZ	"Unexpected value given for %s %.32s"
nv2lfmt:.ASCIZ	"Numeric value too large for "
toolfmt:.ASCIZ	"Argument for %s ""%s"" is too long";
bnvfmt:	.ASCIZ	"Bad numeric value for %s %.32s"
svifmt:	.ASCIZ	"String value illegal for %s ""%.32s"""
ivgfmt:	.ASCIZ	"Illegal value given for %.40s %s"
ce1fmt:	.ASCIZ	"? %s: %s"{LF}
ce2fmt:	.ASCIZ	"    %*s%s"{LF}
ai2lfmt:.ASCIZ	"Argument ""%.40s"" is too long"
nema:	.ASCIZ	"Not enought memory available"
cfn2l:	.ASCIZ	"Command file name is too long"
uqsmsg:	.ASCIZ	"Unterminated quoted string"
ercfmsg:.ASCIZ	"Error reading command file"

$$$=!0
FRM pa_apnt   , 4t	;adv_arg_ptr Str ptr for input(next arg str)
FRM pa_cpnt   , 4t	;cur_arg_ptr Str ptr for input(curr arg str)
FRM pa_kind   , 4t
FRM pa_ifb    , 4t	;Pointer to current indirect file block
FRM pa_count  , 4t
FRM pa_radix  , 4t
FRM pa_value  , 4t
FRM pa_argfnc , 4t
FRM pa_tbl    , 4t
FRM pa_chr    , 4t
FRM pa_inquote, 1t	;TRUE if processing quoted string

FRM pa_minus  , 1t	;TRUE if - before numeric value
FRM pa_switchr, 1t	;Switch character for this item
FRM pa_haveend, 1t	;TRUE if have seen end of input
FRM pa_haveext, 1t
FRM pa_negtn  , 1t	;TRUE if this might be a negative case
FRM pa_canstop, 1t	;TRUE if matching can stop
FRM pa_togstop, 1t	;0 if no switch or '{', 1 of '*'
FRM pa_oldkey , 4t	;Original key ptr (2 pass process)
FRM pa_oldtest, 4t	;Original test ptr (2 pass process)
FRM           , 4t	;
FRM pa_kwbfr  , 64t	;Keyword buffer
FRM pa_kwcopy , 64t	;Copy of keyword buffer
FRM pa_argdata, argdata_SIZE
FRM pa_argbufr, 512t
pa_SIZE=!$$$

$$$=20t
BLK arg_argpnt  , 4t	;Pointer to pointer to argument string
BLK arg_flags   , 4t	;Flag bits
BLK arg_opttbl  , 4t	;Offset of option table
BLK arg_kwtbl   , 4t	;Offset of keyword table
BLK arg_argfnc  , 4t	;Function to process normal arguments
BLK arg_errfnc  , 4t	;Function to call with error message
BLK arg_contfnc , 4t	;Function to call for next input line
BLK arg_indirext, 4t	;Default extension for indirect file

	.PSECT	_TEXT_p
	.ENTRY	progarg
progarg:PUSHL	EBX
	PUSHL	EDI			; Save EDI
	PUSHL	ESI			; Save ESI
	ENTER	pa_SIZE, 0		; create a stack w/pa_SIZE (270h) frames
					; copy 0 frames from the old stack
	MOVB	pa_inquote[EBP], #0	;Not currently quoting string
	MOVB	pa_haveend[EBP], #0	;Not at end of input
	MOVL	EAX, arg_argpnt[EBP]	;Initialize input pointer (1st char**)
	TESTL	EAX, EAX		; No value?
	JE	2$			; goto have_end
	MOVL	EDX, [EAX]		; move the first arg ptr into EDX
	MOVL	pa_cpnt[EBP], EDX	; copy to pa_cpnt (curr_arg_ptr)
	ADDL	EAX, #4			; bump EAX to point to the next arg str
	MOVL	pa_apnt[EBP], EAX	; copy ptr to ptr into (next_arg_str)
	TESTL	EDX, EDX		; No value?
	JNE	4$			; fall through to have_end
2$:	MOVB	pa_haveend[EBP], #1	; have_end
4$:	MOVL	pa_ifb[EBP], #0		; zero out indirect file block
	CALL	getchr			; Get a character
loop:	CALL	skipws			; Make sure not whitespace
	TESTL	EAX, EAX
	JS	10$
	MOVL	EDX, arg_argfnc[EBP]
	MOVL	pa_argfnc[EBP], EDX
	CMPB	AL, #'@'                ; Indirect file name?
	JNE	notindir		; No
	BTL	arg_flags[EBP], #PAF%INDIRECT ;Maybe
	JNC	notindir		;No
	LEAL	ESI, pa_argbufr[EBP]	;Yes
	MOVL	ECX, #500t
	MOVB	pa_haveext[EBP], #0
8$:	CALL	getchr			;Get name character
	CMPL	EAX, #0			;End of name?
	JLE	16$			;Yes
	DECL	ECX			;No - room for more?
	JNE	12$			;Yes - go on
	MOVL	EBX, #cfn2l		;No - fail
	CLRL	EDX
	JMP	callerror

;Here for normal termination

10$:	MOVL	EAX, #1			;Return TRUE
	LEAVE
	POPL	ESI
	POPL	EDI
	POPL	EBX
	RET

;Here to store character in buffer for name of indirect file

12$:	CMPB	AL, #'.'		;Period?
	JNE	14$			;No
	MOVB	pa_haveext[EBP], #1	;Yes - remember have extension
14$:	MOVB	[ESI], AL		;Store character
	INCL	ESI
	JMP	8$			;Continue

;Here with name for indirect file collected

16$:	CMPB	pa_haveext[EBP], #0	;Did we see an extension?
	JNE	20$			;Yes
	PUSHL	#4			;No - add default extension
	PUSHL	arg_indirext[EBP]
	PUSHL	ESI
	CALL	strnmov#
	ADDL	ESP, #12t
	MOVL	ESI, EAX
20$:	MOVB	[ESI], #0
	PUSHL	#rstr			;Open the file
	LEAL	EAX, pa_argbufr[EBP]
	PUSHL	EAX
	CALL	fopen#
	ADDL	ESP, #8t
	TESTL	EAX, EAX		;Error?
	JNE	22$			;No - go on
	LEAL	EAX, pa_argbufr[EBP]
	PUSHL	EAX
	PUSHL	#eocf
	ADDL	EAX, #80t
	PUSHL	EAX
	CALL	sprintf#
	ADDL	ESP, #12t
	MOVL	EAX, errno#
	NEGL	EAX			; Negate it for XOS
	LEAL	EBX, pa_argbufr+80t[EBP]
	JMP	ioerror

;Here with indirect file open

22$:	PUSHL	EAX			;Save stream pointer
	PUSHL	#ifb_SIZE		;Allocate memory for an IFB
	CALL	malloc#
	POPL	ECX
	POPL	EDX
	TESTL	EAX, EAX
	JNE	24$
	MOVL	EAX, #ER_NEMA
	MOVL	EBX, #nema
	JMP	ioerror

;Here with memory allocated for the IFB

24$:	MOVL	EBX, EAX
	MOVL	ifb_stream[EBX], EDX	;Store stream pointer
	MOVL	EAX, pa_ifb[EBP]
	MOVL	[EBX], EAX		;Link in the new IFB
	MOVL	pa_ifb[EBP], EBX
	CALL	fillbufr		;Fill the input buffer
	JMP	loop			;Continue

.PAGE
;Here if do not have an indirect file name here

notindir:
	CMPB	pa_inquote[EBP], #0
	JNE	6$
	CMPB	AL, #'/'		;Is this an option?
	JE	4$
	CMPB	AL, #'-'
	JE	4$
	CMPB	AL, #'+'
	JNE	6$
	BTL	arg_flags[EBP], #PAF%PSWITCH
	JNC	6$
4$:	MOVB	pa_switchr[EBP], AL
	MOVL	pa_kind[EBP], #optstr
	MOVL	pa_argfnc[EBP], #0
	CALL	getchr
	MOVL	EDX, arg_opttbl[EBP]
	JMP	8$

;Here if don't have start of option

6$:	MOVL	EDX, arg_kwtbl[EBP]	;Have a keyword table?
	TESTL	EDX, EDX
	JE	nokeyw			;No
	MOVL	EDX, arg_kwtbl[EBP]	;Yes
	MOVB	pa_switchr[EBP], #0
	MOVL	pa_kind[EBP], #keystr
8$:	MOVL	pa_tbl[EBP], EDX

	MOVL	pa_argdata+argdata_flags[EBP], #0

	LEAL	ESI, pa_kwbfr[EBP]
	MOVL	ECX, #64t
	CMPB	AL, #'+'
	JNE	12$
	BTL	arg_flags[EBP], #PAF%PATOM
	JNC	12$
	MOVB	[ESI], AL
	INCL	ESI
	JMP	18$

12$:	CMPL	EAX, #0
	JLE	18$
	CMPB	AL, #'='
	JE	18$
	CMPB	AL, #'/'
	JE	18$
	CMPB	AL, #'-'
	JE	17$
	CMPB	AL, #'+'
	JNE	14$
	BTL	arg_flags[EBP], #PAF%PSWITCH
	JC	18$
	BTL	arg_flags[EBP], #PAF%PATOM
	JC	18$
14$:	DECL	ECX
	JLE	16$
	MOVB	[ESI], AL
	INCL	ESI
16$:	CALL	getchr
	JMP	12$

;Here with minus sign

17$:	BTL	arg_flags[EBP], #PAF%MWEAK
	JC	14$

;Here with atom collected

18$:	MOVB	[ESI], #0
	MOVL	pa_chr[EBP], EAX
	MOVL	EDI, pa_tbl[EBP]
	TESTL	EDI, EDI		;Was a table specified?
	JE	30$			;No
	LEAL	ECX, pa_kwbfr[EBP]
	PUSHL	ECX			;Yes
	PUSHL	ECX
	LEAL	EAX, pa_kwcopy[EBP]
	PUSHL	EAX
	CALL	strcpy#
	ADDL	ESP, #8t
	CALL	strupr#
	POPL	ECX
20$:	MOVL	EBX, argspec_name[EDI]
	TESTL	EBX, EBX		;End of table?
	JE	30$			;Yes - no match
	CMPW	[EBX], #'*'		;No - match anything?
	JE	22$			;Yes
	LEAL	EAX, pa_kwbfr[EBP]	;No - compare keyword to table entry
	PUSHL	EAX
	PUSHL	EBX
	CALL	argmcmp
	ADDL	ESP, #8t
	TESTL	EAX, EAX
	JNE	26$			;If different
22$:	CMPB	pa_switchr[EBP], #0	;Same - started with switch character?
	JE	tblmatch		;No - its a keyword
	TESTL	argspec_flags[EDI], #ASF$MINUS|ASF$PLUS ;Yes - have any
							;  switch restriction?
	JE	tblmatch		;No
	CMPB	pa_switchr[EBP], #'+'	;Yes - it is plus?
	JNE	24$			;No
	BTL	argspec_flags[EDI], #ASF%PLUS ;Yes - is it valid here?
	JC	tblmatch		;Yes
	JMP	26$			;No - continue searching

24$:	CMPB	pa_switchr[EBP], #'-'	;Is it minus?
	JNE	26$			;No
	BTL	argspec_flags[EDI], #ASF%MINUS ;Yes - is it valid here?
	JC	tblmatch		;Yes
26$:	ADDL	EDI, #argspec_SIZE	;No - advance to next table entry
	JMP	20$			;Continue

;Here if no match on the argument table

30$:	CMPL	pa_argfnc[EBP], #0	;Have a function to call?
	JNE	nonopt			;Yes
	MOVL	EDX, #iokwfmt		;No - fail
badvl2:	JMP	badval

.PAGE
;Here, with a match on the table - now we must see if there is a value next

;Make required adjustments on argument flags and
;  start setting up user function arguments

tblmatch:
	LEAL	EAX, pa_kwcopy[EBP] 	;Copy the opt/kw
	MOVL	pa_argdata+argdata_name[EBP], EAX
					;Copy opt/kw to arg_name
	MOVL	pa_argdata+argdata_flags[EBP], #0
					;Clear the arg_flags
	CMPB	pa_negtn[EBP], #0	;Was the option negated?
	JE	31$			;No, it wasn't
	BTSL	pa_argdata+argdata_flags[EBP], #ADF%NEGATE
					;Yes - set the neg sw

31$:	MOVL	EBX, argspec_flags[EDI]	;Use EBX to contain the argument
					  ;  flag options
	TESTL	EBX, #ASF$LSVAL|ASF$SSVAL|ASF$XSVAL
					;Want a string value?
	JE	40$			;No

;At this point, we know a string value is required

	MOVL	pa_argdata+argdata_data[EBP], #0
	MOVL	pa_argdata+argdata_length[EBP], #0
	BTL	EBX, #ASF%LSVAL 	;Is it a long string?
	JNC	34$			;No, skip

;Here if a long string is expected

	BTSL	pa_argdata+argdata_flags[EBP], #ADF%LSVAL
					;Set LONG Str
	JMP	80$   			;Done with what setup can be
					;  accomplished

;Here if a long string is not expected

34$:	BTL	EBX, #ASF%SSVAL 	;Is it a short string?
	JNC	36$			;No

;Here if a short string is expected

	BTSL    pa_argdata+argdata_flags[EBP], #ADF%SSVAL
	JMP	80$			;Set Short Str

;Here if a strong string is not expected - must be a string table lookup

36$:	BTSL	pa_argdata+argdata_flags[EBP], #ADF%XSVAL
					;Set table Str
	MOVL	pa_argdata+argdata_length[EBP], #0
	JMP	80$			;No length for this


;Here if not a string variant

40$:	MOVL	pa_argdata+argdata_length[EBP], #0 ;No length for this
	BTL	EBX, #ASF%FLAG		;Is this a bitfield value?
	JNC	50$			;No - continue

;Here for FLAG data type

	BTSL	pa_argdata+argdata_flags[EBP], #ADF%FLAG ;Set FLAG
	BTZL	argspec_flags[EDI], #ASF%VALREQ	; No value allowed on flags
	MOVL	EBX, argspec_svalues[EDI]
	BTL     pa_argdata+argdata_flags[EBP], #ADF%NEGATE ;Was the a value
							   ;  negated?
	JNC	42$			;No - move TRUE masks;
	ADDL    EBX, #8t
42$:	MOVL	EAX, [EBX]			   ;Copy the set mask
	MOVL	pa_argdata+argdata_value[EBP], EAX ;  to arg_value
	MOVL	EAX, 4[EBX]			  ;Copy the clear mask
	MOVL	pa_argdata+argdata_data[EBP], EAX ;  to arg_data
	JMP	80$ 			;Done - continue processing

;Here if not a string or flag

50$:	TESTL	EBX, #ASF$NVAL|ASF$BOOL
	JE	60$			;No

;Here it's a boolean or 32 bit numeric

	MOVL	EAX, argspec_data[EDI]		  ;Copy the default data
	MOVL	pa_argdata+argdata_data[EBP], EAX ;  to arg_data
	BTL	EBX, #ASF%BOOL		;Is this a bitfield value?
	JC	52$			;Yes
;	BTSL    pa_argdata+argdata_flags[EBP], #ADF%NVAL ;Set NVAL
	JMP	53$

52$:	BTSL	pa_argdata+argdata_flags[EBP], #ADF%BOOL ;Set BOOL

$$$$2::
53$:	MOVL	pa_argdata+argdata_value[EBP], EAX	 ;  and to arg_value
	BTL	pa_argdata+argdata_flags[EBP], #ADF%NEGATE
					;Was the a value negated?
	JNC	80$			;No - all done
54$:	MOVL	pa_argdata+argdata_value[EBP], #0 ;  and to arg_value
	JMP     80$ 			;Done, continue processing

;It's either an NVAL16 or NVAL8

60$:	BTL	EBX, #ASF%NVAL16
	JNC	70$			;No

;Here it's a 16 bit numeric

;	BTSL	pa_argdata+argdata_flags[EBP], #ADF%NVAL16 ;Set NVAL
	MOVL    EAX, argspec_data[EDI]                ; copy the default data
	MOVL	pa_argdata+argdata_data[EBP], EAX	; to arg_data
	BTL     pa_argdata+argdata_flags[EBP], #ADF%NEGATE ;Was the a value negated?
	JC	62$					; YES
	MOVZWL	EBX, AX 				; copy data piece
	MOVL	pa_argdata+argdata_value[EBP], EBX	; to arg_value
	JMP	80$

62$:	SHRL	EAX, #16t
	MOVZWL	EBX, AX 				; copy data piece
	MOVL	pa_argdata+argdata_value[EBP], EBX	; to arg_value
        JMP     80$

;Here it's a 8 bit numeric

;        BTSL    pa_argdata+argdata_flags[EBP], #ADF%NVAL8 ;Set NVAL

70$:    MOVL    EAX, argspec_data[EDI]                ; copy the default data
	MOVL	pa_argdata+argdata_data[EBP], EAX	; to arg_data
        BTL     EBX, #ASF%NVAL8
	JNC	80$					; NO
        BTL     pa_argdata+argdata_flags[EBP], #ADF%NEGATE ;Was the a value negated?
	JC	72$					; YES
	MOVZBL	EBX, AL 				; copy data piece
	MOVL	pa_argdata+argdata_value[EBP], EBX	; to arg_value
	JMP	80$

72$:	SHRL	EAX, #16t
	MOVZBL	EBX, AL 				; copy data piece
	MOVL	pa_argdata+argdata_value[EBP], EBX	; to arg_value
        JMP     80$

80$:    MOVL    EAX, pa_chr[EBP]
	CALL	skipws
	CMPB	AL, #'='		;Do we have an = ?
	JE	haveq			;Yes

;	 MOVL	 pa_chr[EBP], EAX
;	 CALL	 ungetchr
;	 MOVL	 EAX, pa_chr[EBP]

	PUSHL	EAX  ; save the character
	MOVL	EDX, #nvgfmt		;No
	BTL	argspec_flags[EDI], #ASF%VALREQ ;Is this OK?
	JC	badvl2			;No - complain
	TESTL	pa_argdata+argdata_flags[EBP], #ADF$BOOL|ADF$FLAG
	JNE	callusr
	BTSL	pa_argdata+argdata_flags[EBP], #ADF%NONE
tblmcu: JMP	callusr
.PAGE
;Here if = follows option or keyword name

haveq:	MOVL	EDX, #unxvfmt		;Get offset of message in case error
	TESTL	argspec_flags[EDI], #ASF$FLAG|ASF$BOOL
					;Is this allowed?
	JNE	badvl2			;No - fail
	CLRL	EAX			;Yes - get next character

;sadbg        CMPB    pa_switchr[EBP], #0 ;Is it a keyword?
;        JNE     2$			;No, jump to skip ws
;        CALL    getchr			;Yes, just get the next char
;        JMP     3$			;Jump forward to compare byte

2$:	CALL	skipws
3$:	CMPB	AL, #0			;End of string?
	JLE	4$			;Yes - value is null
	CMPB	AL, #'/'		;Start of next option?
	JNE	6$			;No - have non-null value
	CMPB	pa_inquote[EBP], #0	;Yes - in quotes?
	JNE	6$			;Yes - its part part of the value
4$:	BTSL	pa_argdata+argdata_flags[EBP], #ADF%NULL ;Indicate null value
;	 CALL	 ungetchr
	PUSHL	EAX
;sadbg
	JMP	tblmcu			;Continue

;Here if don't have null value

6$:     BTL     argspec_flags[EDI], #ASF%NVAL ;Can it bHe numeric?
        JC      10$			;Yes - always treat it as a number
	BTL	argspec_flags[EDI], #ASF%NVAL16 ;Can it bHe numeric?
        JC      8$			;Yes - always treat it as a number
	BTL	argspec_flags[EDI], #ASF%NVAL8 ;Can it bHe numeric?
        JNC     20$			;No - always treat it as a string
        BTSL    pa_argdata+argdata_flags[EBP], #ADF%NVAL8
        JMP     12$

8$:     BTSL    pa_argdata+argdata_flags[EBP], #ADF%NVAL16
        JMP     12$

10$:    BTSL    pa_argdata+argdata_flags[EBP], #ADF%NVAL
12$:    MOVB    pa_minus[EBP], #0	;Yes - assume plus
	CMPB	AL, #'0'		;Is it numeric?
        JB      14$			;No
	CMPB	AL, #'9'
	JBE	numval			;Yes
14$:    CMPB    AL, #'+'                ;No - is it a sign?
        JE      16$			;Yes
	CMPB	AL, #'-'
        JNE     20$			;No
	MOVB	pa_minus[EBP], #1	;Minus - remember that
16$:    MOVL    pa_chr[EBP], EAX
	CALL	getchr			;Have sign - get next character
	CMPB	AL, #'0'		;Is it numeric?
        JB      18$			;No
	CMPB	AL, #'9'		;Maybe
	JB	numval			;Yes
18$:    CALL    ungetchr                ;No - put it back
	MOVL	EAX, pa_chr[EBP]
20$:    JMP     notnumv                 ;Continue
.PAGE
;Here with numeric value to collect

numval:	ANDL	pa_argdata+argdata_flags[EBP], #~{ADF$SSVAL|ADF$LSVAL|ADF$XSVAL}
	MOVL	pa_chr[EBP], EAX	;Save first character of value
	PUSHL	pa_cpnt[EBP]		;Save the input state
	PUSHL	pa_apnt[EBP]
	MOVB	AL, pa_haveend[EBP]
	MOVB	AH, pa_inquote[EBP]
	PUSHL	EAX
4$:	CALL	getchr			;Scan ahead to end of value
	TESTB	_IsTable#+1[EAX], #_XDIGT|_DIGIT
	JNE	4$
	POPL	EDX			;Restore the input state
	MOVB	pa_inquote[EBP], DH
	MOVB	pa_haveend[EBP], DL
	POPL	pa_apnt[EBP]
	POPL	pa_cpnt[EBP]
	MOVL	pa_radix[EBP], #10t	;Assume radix is 10
	CMPB	AL, #'.'		;Is this a value list?
	JE	lstval			;Yes
	CMPB	AL, #'-'		;Maybe
	JNE	notlval		;No
	MOVL	pa_radix[EBP], #16t	;Yes, and its radix is 16
lstval:	LEAL	EBX, pa_argdata+argdata_value[EBP]
	MOVL	pa_count[EBP], #4
	MOVL	[EBX], #0
	PUSHL	EBX
	XCHGL	EAX, pa_chr[EBP]	;Restore first character of value, save
6$:	LEAL	ESI, pa_value[EBP]	;  seperator character
	MOVL	EDX, pa_radix[EBP]
	MOVL	ECX, pa_radix[EBP]
	CALL	collectval		;Collect next part of the value
	POPL	EBX
	MOVL	EDX, #nv2lfmt
	CMPL	pa_value[EBP], #255t	;Is it too large
	JA	badval			;Yes - fail
	MOVB	DL, pa_value[EBP]	;No - store it
	MOVB	[EBX], DL
	INCL	EBX
	DECL	pa_count[EBP]		;Have another value part here?
	JLE	valend			;No
	CMPL	EAX, pa_chr[EBP]	;Maybe
	JNE	valend			;No
	PUSHL	EBX
	CALL	getchr			;Yes - get first character of next value
	JMP	6$			;Continue
.PAGE
;Here if value is not a value list

notlval:MOVL	EAX, pa_chr[EBP]	;Restore first character of value
	LEAL	ESI, pa_argdata+argdata_value[EBP] ;Point to place for value
	MOVL	EDX, #10t		;Get radix values
	MOVL	ECX, #8t
	CALL	collectval		;Collect the value
valend:	CMPL	EAX, #0			;End of item?
	JLE	6$			;Yes
	MOVL	EDX, #bnvfmt
	CMPB	AL, #'/'		;Maybe
	JNE	badval			;No - fail
6$:	PUSHL	EAX			;Save next character
	CMPB	pa_minus[EBP], #0	;Yes - should it be negative?
	JE	callusr			;No
	NEGL	pa_argdata+argdata_value[EBP] ;Yes
;8$:     BTSL    pa_argdata+argdata_flags[EBP], #ADF%NVAL
					;Indicate have numeric value
.PAGE
;Here if don't have numeric value

notnumv:ANDL	pa_argdata+argdata_flags[EBP], #~{ADF$NVAL|ADF$NVAL16|ADF$NVAL8}
        TESTL   argspec_flags[EDI], #ASF$SSVAL|ASF$LSVAL|ASF$XSVAL
					;Is a string value OK here?
	JNE	4$			;Yes - go on
	MOVL	EDX, #svifmt
badval:	LEAL	EAX, pa_kwbfr[EBP]	;No - fail
	PUSHL	EAX
	PUSHL	pa_kind[EBP]
	PUSHL	EDX
	LEAL	EAX, pa_argbufr[EBP]
	PUSHL	EAX
	CALL	sprintf#
	ADDL	ESP, #16t
	LEAL	EBX, pa_argbufr[EBP]
	CLRL	EDX
	JMP	callerror

;Here if a string value is OK

4$:     CALL    skipws
        LEAL    EBX, pa_argbufr[EBP]
	MOVL	ECX, #512t
6$:	MOVL	EDX, #toolfmt
	DECL	ECX			;Room for more?
	JE	badval			;No - fail
	MOVB	[EBX], AL		;Yes
	INCL	EBX
	PUSHL	EBX
	CALL	getchr			;Get next character
	POPL	EBX
	TESTL	EAX, EAX		;End of string?
	JLE	10$			;Yes
	CMPB	AL, #'/'		;Maybe
	JNE	6$			;No
	CMPB	pa_inquote[EBP], #0	;Yes, unless in quote mode
	JNE	6$
10$:	PUSHL	EAX			;End of string - save stopper character
	MOVB	[EBX], #0		;End it with a null
	TESTL	argspec_flags[EDI], #ASF$LSVAL|ASF$XSVAL ;Long string OK?
	JE	20$			;No
	BTL	argspec_flags[EDI], #ASF%XSVAL ; requested lookup?
	JNC	18$			;No - do string
	CMPL	argspec_svalues[EDI], #0 ;Yes - did he give us a value
					 ;  table?
	JE	18$			;No
	LEAL	EAX, pa_argbufr[EBP]
	PUSHL	EAX			;Yes - convert string to upper case
	CALL	strupr#
	POPL	ECX
	MOVL	ESI, argspec_svalues[EDI]
12$:	CMPL	[ESI], #0		;End of table?
	JE	16$			;Yes
	LEAL	EAX, pa_argbufr[EBP]
	PUSHL	EAX			;No - compare string to table entry
	PUSHL	[ESI]
	CALL	argmcmp
	ADDL	ESP, #8
	ADDL	ESI, #8t
        TESTL     EAX, EAX
	JNE	12$
	SUBL	ESI, argspec_svalues[EDI]
	SHRL	ESI, #3t
        DECL    ESI
	MOVL	pa_argdata+argdata_value[EBP], ESI
	BTSL	pa_argdata+argdata_flags[EBP], #ADF%XSVAL
	JMP	callusr

;Here if cannot find a match with the user's value table

16$:	MOVL	EDX, #ivgfmt
17$:	JMP	badval

;Here if no value table given - just return the string

18$:	LEAL	EAX, pa_argbufr[EBP]
	MOVL	pa_argdata+argdata_value[EBP], EAX
	SUBL	EBX, EAX		;Calculate length of the string
	MOVL	pa_argdata+argdata_length[EBP], EBX ;Give it to him
	BTSL	pa_argdata+argdata_flags[EBP], #ADF%LSVAL
	JMP	callusr

;Here if do not want a long string value - return this as a short string
;  (which can be up to 4 characters long)

20$:	MOVL	pa_count[EBP], #5
	PUSHL	EDI
	PUSHL	ESI
	MOVL	pa_argdata+argdata_length[EBP], #4
	BTSL	pa_argdata+argdata_flags[EBP], #ADF%SSVAL
	LEAL	EDI, pa_argdata+argdata_value[EBP]
	LEAL	ESI, pa_argbufr[EBP]
22$:	MOVL	EDX, #toolfmt
	DECL	pa_count[EBP]
	JE	27$
	MOVB	AL, [ESI]
	INCL	ESI
	MOVB	[EDI], AL
	INCL	EDI
	CMPB	AL, #0
	JNE	22$
26$:	DECL	pa_argdata+argdata_length[EBP]
	DECL	pa_count[EBP]
	JE	28$
	MOVB	[EDI], #0
	INCL	EDI
	JMP	26$

;Exit cleanups for SSVAL movement to argdata_value

27$:	POPL	ESI
	POPL	EDI
	JMP	17$

28$:	POPL	ESI
	POPL	EDI

callusr::
	LEAL	EAX, pa_argdata[EBP]
	PUSHL	EAX
	BTL	argspec_flags[EDI], #ASF%STORE ;Is direct strg called?
	JNC	ufncall
	MOVL	EAX, argspec_func[EDI]
	MOVL	EBX, pa_argdata+argdata_value[EBP]
	TESTL	argspec_flags[EDI], #ASF$BOOL|ASF$NVAL|ASF$XSVAL
					; Is this a boolean?
	JE	uslstr			;No

;Process bool, argspec_func contains the ptr to target

	MOVL	[EAX], EBX
	JMP	callus2

;Here to see if we need to store a string

uslstr: TESTL   argspec_flags[EDI], #ASF$LSVAL ;Is this a string?
	JE	ussstr

;Process string, argspec_func contains the ptr to target argspec_data
;  contains max string length

	MOVL	EAX, argspec_func[EDI] ;The target
	MOVL	EBX, pa_argdata+argdata_value[EBP] ;The data
	MOVL	ECX, argspec_data[EDI] ;The MAX char count
	DECL	ECX
usstrl: CMPL	ECX, #0			; Moved max characters?
	JBE	usstre
	MOVZBL	EDX, [EBX]		; Move a byte from data into edx
	MOVB	[EAX], DL		; and then into target
	DECL	ECX			; decrement character count
	INCL	EBX			; look at next char in source
	INCL	EAX			; bump to next char in target
	CMPL	EDX, #0			; did we already move the null?
	JE	callus2
	JMP	usstrl			; no, process next char
usstre: MOVB	[EAX], #0		; add a null to the target
	JMP	callus2

ussstr: TESTL   argspec_flags[EDI], #ASF$SSVAL ; Is this a string?
	JE	usshrt

;Process string, argspec_func contains the ptr to target argspec_data
;  contains max string length

	MOVL	EAX, argspec_func[EDI]	;The target
	MOVL	EBX, pa_argdata+argdata_value[EBP] ;The data
	MOVL	[EAX], EBX		;Move the data into target
	JMP	callus2

usshrt: TESTL   argspec_flags[EDI], #ASF$NVAL16
	JE	uschar
	MOVL	EAX, argspec_func[EDI]
	MOVL	EBX, pa_argdata+argdata_value[EBP]
	MOVW	[EAX], BX
        JMP     callus2

uschar: TESTL   argspec_flags[EDI], #ASF$NVAL8
	JE	uflag
	MOVL	EAX, argspec_func[EDI]
	MOVL	EBX, pa_argdata+argdata_value[EBP]
	MOVB	[EAX], BL
        JMP     callus2

uflag:  TESTL   argspec_flags[EDI], #ASF$FLAG ;Is this a bitfield?
	JE	callus2 		;If not, jump all the way out (could
					;  error out?)

;Process flag, argspec_func contains the ptr to target

	MOVL	EAX, argspec_func[EDI]	;Get target addr
	MOVL	EBX, pa_argdata+argdata_value[EBP] ;Load SET mask
	ORL	[EAX], EBX		;Set bits in targ
	MOVL	EBX, pa_argdata+argdata_data[EBP] ;Load CLEAR mask
	NOTL	EBX			;Flip the bits
	ANDL	[EAX], EBX		;Clear bits in targ
        JMP     callus2

ufncall:CALLI   argspec_func[EDI]
callus2:POPL	ECX
	TESTL	EAX, EAX
	JS	30$
	POPL	EAX
	JMP	loop

30$:	LEAVE
	POPL	ESI
	POPL	EDI
	POPL	EBX
	RET
.PAGE
;Here if no keyword table was specified

nokeyw:	CMPL	pa_argfnc[EBP], #0	;Was an argument function given?
	JE	14$			;No
nonopt:	LEAL	EDI, pa_argbufr[EBP]	;Point to the argument buffer
	MOVL	ECX, #512t		;Get maximum length
	CMPB	AL, #'+'		;Does it start with a plus?
	JNE	2$			;No
	CMPB	arg_flags[EBP], #PAF%PATOM ;Yes - is this special?
	JNC	2$			;No
	MOVB	[EDI], AL		;Yes
	INCL	EDI
	CALL	getchr
	JMP	6$

2$:	TESTL	EAX, EAX		;End of string?
	JLE	6$			;Yes
	CMPB	pa_inquote[EBP], #0	;No - in quoted string?
	JNE	4$			;Yes
	CMPB	AL, #'/'		;No - start of option?
	JE	6$			;Yes
	CMPB	AL, #'+'		;Maybe
	JNE	4$			;No
	BTL	arg_flags[EBP], #PAF%PATOM
	JNC	6$			;Yes
4$:	DECL	ECX			;Not start of option - count it
	JS	10$			;If too long
	MOVB	[EDI], AL		;OK - store in buffer
	INCL	EDI
	CALL	getchr			;Get next character
	JMP	2$			;Continue

;Here with end of string while collecting argument

6$:	MOVB	[EDI], #0		;Terminate the argument string
	PUSHL	EAX			;Save stopper character
	LEAL	EAX, pa_argbufr[EBP]
	PUSHL	EAX
	CALLI	pa_argfnc[EBP]		;Call user routine for the argument
	JMP	callus2

;Here if argument string is too long for our buffer

10$:	LEAL	EAX, pa_argbufr[EBP]
	PUSHL	EAX
	PUSHL	#ai2lfmt
	ADDL	EAX, #120t
	PUSHL	EAX
	CALL	sprintf#
	ADDL	ESP, #12t
	LEAL	EBX, pa_argbufr+120t[EBP]
	CLRL	EDX
	JMP	callerror

;Here if no keyword table and no argument function given and have an argument

14$:	MOVL	EAX, pa_cpnt[EBP]
	DECL	EAX
	PUSHL	EAX
	PUSHL	#unexfmt
	LEAL	EAX, pa_argbufr+80t[EBP]
	PUSHL	EAX
	CALL	sprintf
	ADDL	ESP, #12t
	LEAL	EBX, pa_argbufr+80t[EBP]
	CLRL	EDX
	JMP	callerror
.PAGE
;Subroutine to collect a numeric value
;	c(AL)  = First character of value string
;	c{ESI} = Pointer to value
;	c{EDX} = Primary radix
;	c{ECX} = Alternate radix (used if leading 0)
;	CALL	collectval
;	c(AL) = Next character after value

collectval:
	MOVL	pa_radix[EBP], EDX	;Assume want primary radix
	MOVL	[ESI], #0		;Intialize the value
	CMPB	AL, #'0'		;Does it start with 0?
	JNE	6$			;No
	MOVL	pa_radix[EBP], ECX	;Yes - assume alternate radix
	CALL	getchr
	CMPB	AL, #'X'		;Does he want hex?
	JE	2$
	CMPB	AL, #'x'
	JNE	6$
2$:	MOVL	pa_radix[EBP], #16t	;Yes
4$:	CALL	getchr
6$:	TESTB	_IsTable#+1[EAX], #_XDIGT|_DIGIT
	JE	10$
	MOVL	ECX, EAX
	CMPB	CL, #'A'
	JB	8$
	ADDB	CL, #9
8$:	ANDB	CL, #0x0F
	CMPB	CL, pa_radix[EBP]
	JAE	10$
	MOVL	EAX, [ESI]
	IMULL	EAX, pa_radix[EBP]
	ADDL	EAX, ECX
	MOVL	[ESI], EAX
	JMP	4$

10$:	RET
.PAGE
	.SBTTL	callerror - Routine to process errors

;Routine to process errors - this routine never returns directly - if the
;  user specified an error function, that function is called and then a
;  direct return from progarg is done - if the user did not specify an
;  error function, this routine exits after printing an error message
;	c{EBX} = Offset of first message string
;	c{EDX} = Offset of second message string
;	JMP	callerror

callerror:
	CMPL	arg_errfnc[EBP], #0	;Did he give us an error function?
	JNE	8$			;Yes - go call it
	PUSHL	EDX			;Save offset of 2nd string
	PUSHL	EBX			;Output 1st string
	PUSHL	#prgname#
	PUSHL	#ce1fmt
	PUSHL	#_stderr#
	CALL	fprintf#
	ADDL	ESP, #16t
	POPL	ECX			;Restore offset of 2nd string
	JREGZ	ECX, 4$			;If no 2nd string
	PUSHL	ECX
	PUSHL	#nullstr
	PUSHL	#prgname#
	CALL	strlen#
	POPL	ECX
	PUSHL	EAX
	PUSHL	#ce2fmt
	PUSHL	#_stderr#
	CALL	fprintf#
	ADDL	ESP, #20t
4$:	PUSHL	#1
	CALL	exit#

;Here if the user specified an error function

8$:	PUSHL	EDX
	PUSHL	EBX
	CALLI	arg_errfnc[EBP]
	ADDL	ESP, #8t
	MOVB	pa_haveend[EBP], #1
	CLRL	EAX
	LEAVE
	POPL	ESI
	POPL	EDI
	POPL	EBX
ret020:	RET
.PAGE
	.SBTTL	skipws - Subroutine to skip whitespace and return next character

;Subroutine to skip whitespace and return next character
;	c{EAX} = Current character
;	CALL	skipws
;	c{EAX} = Next character

skipws:	TESTL	EAX, EAX		;At end of string?
	JE	4$			;Yes
	TESTB	_IsTable#+1[EAX], #_SPACE ;No - whitespace character?
	JE	ret020			;No - just return with it
4$:	CALL	getchr			;Yes - get next character
	JMP	skipws			;Continue
.PAGE
	.SBTTL	getchr - Subroutine to get next input character

;Subroutine to get next input character (this level routine mainly handles
;  quoted strings)
;	CALL	getchr
;	c{EAX} = Character (0 if end of string, -1 if end of input)

getchr:	CMPB	pa_haveend[EBP], #0	;At end?
	JE	2$			;No
	CMPL	pa_ifb[EBP], #0		;Yes, fail if not reading file
	JE	6$
2$:	CMPB	pa_inquote[EBP], #0	;In quote mode?
	JE	10$			;No
	CALL	xgetchr			;Yes - get character
	TESTL	EAX, EAX
	JS	8$
	CMPB	AL, #'"'		;Have a quote?
	JNE	4$			;No - just return it
					;Following is a bit of a kludge - There
					;  must be a better way to do this!
	CMPL	pa_ifb[EBP], #0		;Getting input from a file?
	JNE	102$			;Yes
	MOVL	EBX, pa_cpnt[EBP]	;No - do we have another character?
	CMPB	[EBX], #0		;  (Must check before calling xgetchr
					;  else xgetchr will advance to next
					;  string!)
	JNE	104$			;No end - look at the next character
	MOVB	pa_inquote[EBP], #0	;End - indicate not in quotes now
	BTL	arg_flags[EBP], #PAF%EATQUOTE ;Eating quotes?
	JNC	102$
	MOVB	AL, #0			;Yes - return end of string indication
102$:	RET

;If have a quote from a file in quote mode

104$:	CALL	xgetchr			;Yes - get next character
	CMPB	AL, #'"'		;Another quote?
	JE	4$			;Yes - return it
	MOVB	pa_inquote[EBP], #0	;No - indicate not in quotes now

;;;;;	TESTL	EAX, EAX		;Don't put char back if it's the end of
;;;;;	JE	3$			;  argument

	CALL	ungetchr
3$:	BTL	arg_flags[EBP], #PAF%EATQUOTE
	JC	getchr
	MOVB	AL, #'"'
4$:	RET

;Here if at end of input

6$:	MOVL	EAX, #-1
	RET

;Here if have end of input while in quoted string - this is a fatal error

8$:	MOVL	EBX, #uqsmsg
	CLRL	EDX
	JMP	callerror

;Here if not in quotes now

10$:	CALL	xgetchr			;Get next character
	CMPB	AL, #'"'		;Quote character?
	JE	12$			;Yes
	TESTB	_IsTable#+1[EAX], #_SPACE  ; is it a whitespace char, ret char
	JE	14$
	CLRL	EAX
	RET

12$:	MOVB	pa_inquote[EBP], #1	;Indicate in quotes now
	BTL	arg_flags[EBP], #PAF%EATQUOTE
	JC	2$
14$:	RET
.PAGE
	.SBTTL	xgetchr - Subroutine to get character at lowest level

;Subroutine to get character at lowest level
;	CALL	xgetchr
;	c{EAX} = Character (-1 means end of input)

xgetchr:CMPL	pa_ifb[EBP], #0		;Getting input from a file?
	JE	10$			;No
	MOVL	EBX, pa_ifb[EBP]
	MOVL	EAX, ifb_point[EBX]
	MOVZBL	EAX, [EAX]
	CMPB	AL, #0
	JE	2$
	CMPB	AL, #LF
	JNE	6$
2$:	BTL	arg_flags[EBP], #PAF%ECHOINDIR
	JNC	4$
	PUSHL	#_stdout#
	PUSHL	#LF
	CALL	fputc#
	ADDL	ESP, #8t
4$:	JMP	fillbufr

6$:	INCL	ifb_point[EBX]
	BTL	arg_flags[EBP], #PAF%ECHOINDIR
	JNC	8$
	PUSHL	EAX
	PUSHL	#_stdout
	PUSHL	EAX
	CALL	fputc#
	ADDL	ESP, #8t
	POPL	EAX
8$:	RET

;Here if not reading from an indirect file

10$:	MOVL	EBX, pa_cpnt[EBP]
	INCL	pa_cpnt[EBP]		;Bump pointer
	MOVZBL	EAX, [EBX]		;Get character
	TESTB	AL, AL			;Return if not end of string
	JNE	8$
	MOVL	EBX, pa_apnt[EBP]	;Advance to next string
	ADDL	pa_apnt[EBP], #4
	MOVL	EAX, [EBX]
	MOVL	pa_cpnt[EBP], EAX
	TESTL	EAX, EAX		;Do we have another string?
	JNE	12$			;Yes - return 0 this time
	MOVB	pa_haveend[EBP], #1	;No - indicate at end
	MOVL	EAX, #-1		;Return -1
	RET

12$:	CLRL	EAX
	RET
.PAGE
	.SBTTL	ungetchr - Subroutine to unget a character

;Subroutine to unget a character
;	CALL	ungetchr

ungetchr:
	CMPL	pa_ifb[EBP], #0
	JE	4$
	MOVL	EBX, pa_ifb[EBP]
	DECL	ifb_point[EBX]
	RET

4$:	DECL	pa_cpnt[EBP]
	RET
.PAGE
	.SBTTL	fillbufr - Subroutine to fill the current line buffer

;Subroutine to fill the current line buffer
;	CALL	fillbufr
;	c{EAX} = First character (which is always a null, to ensure that no
;		   strings get split across files)

fillbufr:
	MOVL	EBX, pa_ifb[EBP]
	PUSHL	ifb_stream[EBX]
	PUSHL	#512t
	ADDL	EBX, #ifb_buffer
	PUSHL	EBX
	CALL	fgets#
	ADDL	ESP, #12t
	TESTL	EAX, EAX
	JNE	8$
	PUSHL	errno#
	MOVL	EBX, pa_ifb[EBP]
	PUSHL	ifb_stream[EBX]
	CALL	fclose#
	POPL	ECX
	MOVL	EBX, pa_ifb[EBP]
	MOVL	EAX, ifb_previous[EBX]
	MOVL	pa_ifb[EBP], EAX
	PUSHL	EBX
	CALL	free#
	POPL	ECX
	POPL	EAX
	CMPL	EAX, #0
	JE	4$
        NEGL    EAX
	CMPL	EAX, #ER_EOF
	JNE	ioerror
4$:	CLRL	EAX
	MOVL	errno#, #0
	RET

8$:	MOVL	EBX, pa_ifb[EBP]
	LEAL	EAX, ifb_buffer[EBX]
	MOVL	ifb_point[EBX], EAX
	CLRL	EAX
	RET

.PAGE
	.SBTTL	argmcmp - Subroutine to match arguments in table

;Routine to compare keyword with wildcards (from table)
;    to input value (test)
;	c{EAX} = test value, pointer to start of string
;	c{EBX} = keyword value, pointer to start of string
;	c{ECX} = neg_allowed, long
; Returns 1-match 0-No match in ECX

argmcmp:PUSHL	EDI
	PUSHL	ESI

;Initialize subroutine variables

	MOVL	EBX, 12t[ESP] 		;Get the key (table) value
	MOVL	EAX, 16t[ESP] 		;Get the test (input) value
	MOVL	pa_oldkey[EBP], EBX	;Save copies
	MOVL	pa_oldtest[EBP], EAX
	MOVB	pa_negtn[EBP], #0	;Initialize control variables
	MOVB	pa_canstop[EBP], #0
	MOVB	pa_togstop[EBP], #0

;If the data type (for key) is BOOL or FLAG, set NEGATE

	TESTL	argspec_flags[EDI], #ASF$BOOL|ASF$FLAG
	JE	3$
	BTSL	argspec_flags[EDI], #ASF%NEGATE
	JMP	3$			;Setup done, start processing

;Check for negation "NO"+ECX&NEGMASK

1$:	BTL	argspec_flags[EDI], #ASF%NEGATE ; Is a negation allowed?
	JNC	14$			; No, bail out
        MOVL	EBX, pa_oldkey[EBP]	; reset the keyword pointer
        MOVL	EAX, pa_oldtest[EBP]	; reset the test value
	CMPB	[EAX], #'N'             ; Does it start with an 'N'
	JNE	14$			; No, bail out
	INCL	EAX			; look at the next character
	CMPB	[EAX], #'O'             ; is it an 'O'
	JNE	14$			; no, bail out
	MOVB	pa_negtn[EBP], #1	; set negation ON
	INCL	EAX			; look at the next character
3$:	CMPB	[EAX], #0		; at the end of the test string?
	JNE	6$			; Nope, start examining the char
	CMPB	[EBX], #0		; At end of the key string?
	JNE	4$			; Nope

;here, Test string AND key string are at the end its a match!

	JMP	16$

;Here when the test string is done and the key string isn't

4$:	CMPB	pa_canstop[EBP], #1	;Is the canstop flag set?
	JE	4a$			;Yes
	CMPB	[EBX], #'*'		;Is the next key char special?
	JE	4a$
	CMPB	[EBX], #'|'
	JNE	4b$
4a$:	JMP	16$			;Its a match!

4b$:	CMPB	pa_negtn[EBP], #0	;Try again for negation?
	JE	1$			;Yep, but set loop control first
	JMP	14$			;Match failed

;Here, somewhere in the test string

6$:	MOVB	DL, pa_togstop[EBP]	;reset the canstop switch
	MOVB	pa_canstop[EBP], DL	;with the contents of togstop
	MOVB	DL,[EBX]
	CMPB	[EAX], DL		; Are the two characters equal?
	JNE	8$			; No, check for special characters in key
	INCL	EAX			; Bump the keyword pointer
	INCL	EBX			; Bump the test pointer
	JMP	3$			; Jump back and test new values

;Here, failed a match but there might be wildcards

8$:	CMPB	[EBX], #'*'             ;"Match the rest" character?
	JNE	10$			;No, check for special characters in key
	CMPB	1[EBX], #0		;Yes - at end of key?
	JE	16$			;Yes - its a match
	MOVB	pa_canstop[EBP], #1	;No - set canstop
	MOVB	pa_togstop[EBP], #1	;Set toggle stop (keeps it perm)
	INCL	EBX			;Look at next keyword char
	JMP	3$			;Keep testing

;Here if key character that didn't match was not *

10$:	CMPB	[EBX], #'|'             ; "Match here" character?
	JNE	12$			; No, adjust the loop controls for no match
	MOVB	pa_canstop[EBP], #1	; yep, could stop now
	INCL	EBX			; look at next keyword
	JMP	3$

12$:	ORB	pa_negtn[EBP], #0	; Could this be a negation?
	JE	1$			; non zero, could be a negation
14$:	POPL	ESI			; NO MATCH EXIT
	POPL	EDI
	MOVL	EAX, #1 		; set return value to 1 (no match)
	RET				; bail

	; If the data type (for key) is SSVAL,LSVAL CLEAR STORE
16$:
;	TESTL	argspec_flags[EDI], #ASF$SSVAL|ASF$LSVAL
;	 JE	 17$
;	 BTZL	 argspec_flags[EDI], #ASF%STORE
17$:	POPL	ESI			; MATCH EXIT
	POPL	EDI
	MOVL	EAX, #0 		; set return value to 0 (MATCH)
	RET				; bail


.PAGE
	.SBTTL	ioerror - Subroutine to display message for IO error

;Routine to display message for IO error (never returns)
;	c{EAX} = Error code
;	c{EBX} = Offset of message
;	JMP	ioerror

ioerror:SUBL	ESP, #100t
	MOVL	EDX, ESP
	PUSHL	EAX
	PUSHL	#3
	PUSHL	EDX
	CALL	svcSysErrMsg#
	JMP	callerror

	.END
