	.TITLE	strtoul - ANSI C function to convert integer strings
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\xmac\xos.par
	.INCLUD	XOSINC:\xmac\xoserr.par
	.INCLUD	XOSINC:\xmac\stdio.par
	.INCLUD	XOSINC:\xmac\ctype.par

	.STDSEGS

	.PSECT	_TEXT_p

;This is a common routine called by strtol, strtoul, strtoll, and strtoull.
;  All of these have the same argument structure so other than the value
;  in EAX the arguments are all taken from the stack.
;	c{EAX} = Mode:
;		   Bit 0: Set if signed otherwise unsigned
;		   Bit 1: Set if long long otherwise long


MODE_SIGN =!0x01
MODE_64BIT=!0x02
MODE_MINUS=!0x04
MODE_OVER =!0x08

MAXBASE =! 36

stn_str =!12t
stn_end =!16t
stn_base=!20t

	.ENTRY	$strtonum
$strtonum:
	PUSHL	EBX
	PUSHL	ESI
	MOVL	EBX, EAX		;Get the mode bits in the right register
	MOVL	ESI, stn_str[ESP]
	CLRL	EAX			;Clear the value
	CLRL	EDX
	MOVL	ECX, stn_base[ESP]
	CMPL	ECX, #1			;Base 1?
	JE	8$			;Yes that's not valid
	CMPL	ECX, #MAXBASE		;More than 36?
	JBE	10$			;No - go on
8$:	MOVL	errno#, #-ER_DOM	;Base is invalid
	JMP	alldn

;Advance past any leading whitespace characters in string

10$:	MOVZBL	ECX, [ESI]		;Get first character
	TESTL	ECX, ECX		;End of string?
	JE	finish			;Yes - so quit with EAX = 0
	INCL	ESI
	TESTB	_IsTable#+1[ECX], #_SPACE ;Whitespace character?
	JNE	10$			;Yes - keep looping

;Check to see if we have a plus or minus for sign if we need to

	TESTB	BL, #MODE_SIGN		;Signed mode?
	JE	30$			;No - always positive
	CMPL	ECX, #'-'		;Yes - is it negative?
	JE	20$			;Yes
	CMPL	ECX, #'+'		;No - do we need to eat a plus sign?
	JNE	30$			;No
	JMP	24$			;Yes

20$:	ORL	EBX, #MODE_MINUS
24$:	MOVZBL	ECX, [ESI]		;Eat the - or +
	INCL	ESI

;Check for special radix of zero

30$:	CMPL	stn_base[ESP], #0	;Was the base zero?
	JNE	60$			;No
	CMPL	ECX, #'0'		;Yes - is the first digit zero?
	JE	50$			;Yes - it's either octal or hex.
	MOVL	stn_base[ESP], #10t	;No - its decimal
	JMP	60$

;Here if special radix and first non-whitespace character was a '0'

50$:	MOVZBL	ECX, [ESI]		;See if 'x' or 'X' followed '0'
	INCL	ESI			;Skip to next
	MOVL	stn_base[ESP], #16t	;Assume hexadecimal
	CMPL	ECX, #'x'		;Was it 0x?
	JE	loop			;Yes
	CMPL	ECX, #'X'		;Was it 0X?
	JE	loop			;Yes
	MOVL	stn_base[ESP], #8t	;No - it's octal
	JMP	loop			;Continue below

;Here if not special radix, to see if radix is hexidecimal and eat the hex
;  prefix if it's there

60$:	CMPL	stn_base[ESP], #16t	;Is radix 16?
	JNE	loop			;No
	CMPL	ECX, #'0'		;Is first character zero?
	JNE	loop			;No
	CMPB	[ESI], #'x'		;Was it 0x?
	JE	64$			;Yes
	CMPB	[ESI], #'X'		;Was it 0X?
	JNE	loop			;No
64$:	INCL	ESI			;Yes - eat the X

;Collect the value

loop:	TESTL	ECX, ECX		;All done?
	JE	done			;Yes
	TESTB	_IsTable#+1[ECX], #_UPPER|_LOWER|_DIGIT
					;Alphanumeric character?
	JE	done			;No - finished
	TESTB	_IsTable#+1[ECX], #_DIGIT ;Decimal digit (0-9)?
	JNE	86$			;Yes
	TESTB	_IsTable#+1[ECX], #_UPPER ;Uppercase letter?
	JNE	84$			;Yes
	SUBL	ECX, #'a' - 'A'		;No, lowercase - make it uppercase
84$:	SUBL	ECX, #'A' - '9' - 1	;Make A-Z contiguous with 0-9
86$:	SUBL	ECX, #'0'		;Get value of the digit
	CMPL	ECX, stn_base[ESP]	;Is it too big for base?
	JAE	done			;Yes - finished
	MULL	stn_base[ESP]		;Make room for another character
	ADDL	EAX, ECX		;Add in the next "digit"
	JNC	90$			;More than 32 bits?
	TESTB	BL, #MODE_64BIT		;Yes - 64-bit mode?
	JE	88$			;No - have overflow
	ADDL	EDX, #1			;Yes - add the carry to the high long
	JNC	90$			;Overflow?
88$:	ORL	EBX, #MODE_OVER		;Yes - remember that (Must continue
					;  so we can return the end pointer!)
90$:	MOVZBL	ECX, [ESI]		;Get next character
	INCL	ESI
	JMP	loop			;Continue
.PAGE	
;Here when done colecting characters

done:	DECL	ESI			;Point to the stopper
	TESTB	BL, #MODE_MINUS		;Should the value be negative?
	JE	20$			;No
	TESTB	BL, #MODE_64BIT		;Yes - 64-bit mode?
	JNE	10$			;Yes
	TESTL	EAX, EAX		;No - is the 32-bit value too big?
	JS	22$			;Yes
4$:	NEGL	EAX			;No - negate it
	JMP	20$

;Here if need to negate a 64-bit value

10$:	TESTL	EDX, EDX		;Is the 64-bit value too big?
	JS	22$			;No
	NEGL	EDX
	NEGL	EAX
	SBBL	EDX, #0
20$:	TESTB	BL, #MODE_OVER		;Did it overflow?
	JE	finish			;No
22$:	MOVL	errno#, #-ER_RANGE	;Yes - indicate we overflowed
	TESTB	BL, #MODE_SIGN		;Signed mode?
	JE	34$			;No
	TESTB	BL, #MODE_MINUS		;Should it be negative?
	JNE	28$			;No
	TESTB	BL, #MODE_64BIT		;Yes - 64-bit mode?
	JNE	24$			;Yes
	MOVL	EAX, #0x80000001	;No - get minimum 32-bit value
	JMP	finish

24$:	MOVL	EAX, #0x00000001	;Yes - get minimum 64-bit value
	MOVL	EDX, #0x80000000
	JMP	finish

;Here if overflow with a positive signed value

28$:	TESTB	BL, #MODE_64BIT		;64-bit mode?
	JNE	30$			;Yes
	MOVL	EAX, #0x7FFFFFFF	;No - get maximum 32-bit value
	JMP	finish

30$:	MOVL	EDX, #0x7FFFFFFF	;Yes - get maximum 64-bit value
	JMP	36$

;Here if overflow for an unsigned value

34$:	MOVL	EDX, #0xFFFFFFFF	;Get the maximum 32-bit/64-bit value
36$:	MOVL	EAX, #0xFFFFFFFF
finish:	MOVL	ECX, stn_end[ESP] 	;Get the end pointer
	TESTL	ECX, ECX		;Is it NULL?
	JE	alldn			;Yes
	MOVL	[ECX], ESI		;No - return pointer to stopper
alldn:	POPL	ESI
	POPL	EBX
	RET

	.END
