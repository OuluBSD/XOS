	.TITLE	memset - ANSI C function to initialize a memory region
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
; 30Aug94  FPJ  Fixed code to return pointer in EAX.
; 14Aug94  FPJ  Optimized code to copy longwords if possible.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.SBTTL	memset - ANSI C function to initialize a memory region

;Calling sequence:
;	void *memset(void *pnt, int value, size_t size);
;  Value returned is pnt.

arg_pnt=!8
arg_val=!12t
arg_cnt=!16t

	.PSECT	_TEXT_p

	.ENTRY	memset
memset:	PUSHL	EDI
	MOVL	EDX, arg_cnt[ESP]	;Get amount to copy
	TESTL	EDX, EDX
	JLE	14$
	MOVL	EAX, DS
	MOVL	ES, EAX
	CLD
	MOVL	EDI, arg_pnt[ESP]	;Get offset of destination string
	MOVZBL	EAX, arg_val[ESP]	;Get value to store
        CMPL	EDX, #3			;Less than a longword to store?
	JBE	10$			;Yes, just store it and quit
        MOVL    ECX, EDI                ;Get destination address
        NEGL    ECX                     ;Get 2's complement so that
	ANDL	ECX, #3			; we can figure no. of bytes
        SUBL    EDX, ECX                ;  needed for longword alignment
	RSTOSB	[EDI]			;Store 0-3 bytes

;Store the low byte through the upper 3 bytes

	MOVB	AH, AL			;Replicate low 8 bits in next 8 bits
	MOVL	ECX, EAX
	SHLL	EAX, #16t		;Move low 16 bits to high 16 bits
	MOVW	AX, CX			;Now copy low 16 bits from spare

;Now store longwords

        MOVL    ECX, EDX                ;Get the no. of remaining bytes
        SHRL    ECX, #2			;Calculate longword count
        RSTOSL  [EDI]			;Store longwords
10$:    MOVL    ECX, EDX		;Calculate the number of bytes left
        ANDL    ECX, #3			;  to store
	RSTOSB	[EDI]			;Copy 0-3 bytes
        MOVL    EAX, arg_pnt[ESP]	;Get value to return
14$:	POPL	EDI
	RET

	.END
