	.TITLE	utility - General utility SVC routines for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR

	CODE

	.SBTTL	knlNotIns - Common routine for not installed functions

;Here to return an ER_NTINS error

knlNotIns::
	MOVL	EAX, #ER_NTINS
	STC
	RET

	.SBTTL	svcSysGetPid - SVC to get process ID

;Here for the svcSysGetPid SVC - Get process ID - returns process ID for the
;  current process
;	rtn = svcSysGetPid();
;  Value returned is the process ID

psvcSysGetPid::
	MOVL	EAX, knlPda+pdaPid#
	RET
.PAGE
	.SBTTL	svcSysGetPName - SVC to get process name

;Here for the svcSysGetPName SVC - Get process name - returns name of
;  specified process
;	int processid;		// Process ID (0 means current process)
;	far char *string;	// Address of string to receive name (up
;				//   to 13 bytes
;	rtn = svcGetPName(processid, string);
;  Value returned is 0 if normal or negative error code if error

psvcSysGetPName::
	PUSHL	knlTda+tdaArg1#
	CALL	checkkill#		;Can he have it?
	TESTL	EAX, EAX
	JE	12$			;No - fail

6$:
	CRASH	????

;;;;;;	MOVL	FS, EAX
	IFFAULT	knlRtnAdrEr#
	LESL	EDI, knlTda+tdaArg3#	;Get address of buffer
;;;;;;	MOVL	ESI, #pdaName#		;Get offset of name
	MOVL	ECX, #32t
	CLD
	LODSB	FS:[ESI]		;Give him the name
	IFFAULT	knlRtnAdrEr#
	STOSB	[EDI]
	TESTB	AL, AL
	JE	10$.S
	LOOP	ECX, 6$
	CLRL	EAX			;Full 32 characters - put null at end
	IFFAULT	knlRtnAdrEr#
	STOSB	[EDI]
	CLRL	EAX			;Return 0
10$:	RET

12$:	MOVL	EAX, #ER_BDPID
	RET
.PAGE
	.SBTTL	svcSysSetPName - SVC to set process name

;Here for the svcSysSetPName SVC - set name of current process
;	far char *string;	// Address of string to receive name (up
;				//   to 13 bytes
;	rtn = svcSysSetPName(string);
;  Value returned is 0 if normal or negative error code if error

psvcSysSetPName::
	MOVL	ESI, knlTda+tdaArg1#	;Get address of string
	MOVL	EDI, knlPda+pdaSpy#	;Get offset for storing name
	MOVL	EAX, DS
	MOVL	ES, EAX
	MOVL	ECX, #32t
	CLD
	IFFAULT	knlRtnAdrEr#
6$:	LODSB	[ESI]			;Copy name
	TESTB	AL, AL
	JE	12$
	STOSB	[EDI]
	LOOP	ECX, 6$
	CLRL	EAX			;Finished
10$:	RET
	
;Here if name is less than 32 characters

12$:	CLRL	EAX			;Fill it out to 32 characters with
	RSTOSB	[EDI]			;  nulls
	RET
.PAGE
	.SBTTL	svcSysGetPLevel - SVC to get process level

;Here for the svcSysGetPLevel SVC - Get process level - returns level of
;  specified process
;	int processid;		// Process ID (0 means current process)
;	rtn = svcGetProcLevel(processid);
;  Value returned is level if normal or negative error code if error

psvcSysGetPLevel::
	PUSHL	knlTda+tdaArg1#
	CALL	checkkill#		;Can he have it?
	TESTL	EAX, EAX
	JE	8$			;No - fail
6$:	MOVZBL	EAX, pdaPLevel#[EAX]	;Yes - get level of process
	RET				;And return it

8$:	MOVL	EAX, #ER_BDPID
	RET
.PAGE
	.SBTTL	svcSysGetPData - SVC to get process data

;Here for the svcSysGetPData SVC - Get process data - returns data about the
;  specified process
;	int processid;		// Process ID (0 means current process)
;	far char *datastruc;	// Address of structure to receive data
;	rtn = svcSysGetPData(processid, datastruc);
;  Value returned is 0 if normal or negative error code if error

psvcSysGetPData::
	MOVL	EAX, #ER_NIYT
	RET
.PAGE
	.SBTTL	knlStoreCode - Subroutine to store long into the code segment

;Subroutine to store long into the code segment
;	c{EAX} = Value to store
;	c{EBX} = Code segment offset
;	CALL	knlStoreCode

.IF NE 0
knlStoreCode::
	MOVB	gdtable+GS_CODEALS+5, #DT_RWDATA+PL_0 ;Enable alaised code
	PUSHL	#GS_CODEALS.B			      ;  segment
	POPL	ES
	MOVL	ES:[EBX], EAX		;Store the value
	CLRL	EAX
	MOVL	ES, EAX
	MOVB	gdtable+GS_CODEALS+5, BL ;Disable the allaised code space
	RET
.ENDC

	END
