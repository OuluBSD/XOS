	.TITLE	search

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80386
	.INCLUD xosinc:\xmac\stdio.par
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD XOSINC:\XMAC\CLIBX.PAR
	.INCLUD XOSINC:\XMAC\PROCARG.PAR
	.INCLUD	VID.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	findprv - Search for previous string at beginning of line

;Subroutine to search for previous string at beginning of line
;	CALL	findprv
;	C:set = Not found
;	C:clr = Found
;	  Z:set = Match in current line
;	  Z:clr = Have advanced down file
;	  c{EBX} = Pointer to line containing string
;	  c(AL)  = Position of first character in string in line
;	  c{ECX} = Number of lines advanced

findprv::
	MOVB	AL, #1			;Indicate "find" type search
	JMP	2$

	.SBTTL	locprv - Search for previous string in line

;Subroutine to search for previous string in line
;	CALL	locprv
;	C:set = Not found
;	C:clr = Found
;	  Z:set = Match in current line
;	  Z:clr = Have advanced down file
;	  c{EBX} = Pointer to line containing string
;	  c(AL)  = Position of first character in string in line
;	  c{ECX} = Number of lines advanced

locprv::MOVB	AL, #0			;Indicate "locate" type search
2$:	MOVB	fndflg#, AL		;Set search type indicator
	MOVL	scount#, #1		;Repeat count is always 1
	CMPB	strcnt#, #0		;Have a previous search string?
	JNE	sear18			;Yes - go search
	JMP	searns			;No - complain and fail
.PAGE
	.SBTTL	find - Search for string at beginning of line

;Subroutine to search for string at beginning of line from command mode
;	CALL	find
;	C:set = Not found
;	C:clr = Found
;	  Z:set = Match in current line
;	  Z:clr = Have advanced down file
;	  c{EBX} = Pointer to line containing string
;	  c(AL)  = Position of first character in string in line
;	  c{ECX} = Number of lines advanced

find::	MOVB	AL, #1			;Indicate "find" type search
	JMP	2$			;Go to common routine

	.SBTTL	locate - Search for string anywhere in line

;Subroutine to search for string anywhere in line from command mode
;	CALL	locate
;	C:set = Not found
;	C:clr = Found
;	  Z:set = Match in current line
;	  Z:clr = Have advanced down file
;	  c{EBX} = Pointer to line containing string
;	  c(AL)  = Position of first character in string in line
;	  c{ECX} = Number of lines advanced

locate::MOVB	AL, #0			;Indicate "locate" type search
2$:	MOVB	fndflg#, AL		;Set search type indicator
	MOVB	strdel#, #0		;Clear delimiter
	CALL	getnum#			;Get search count
	ORL	EBX, EBX
	JNE	3$
	INCL	EBX
3$:	MOVL	scount#, EBX		;Store count
	JE	12$			;Null string if end of line here
	CALL	getcmc#			;Get the next character
	CMPB	AL, #'A'		;Is character less than alpha
	JB	6$			;Yes - valid delimiter
	CMPB	AL, #'z'		;No - is character Greater than alpha
	JA	6$			;Yes - valid delimiter
	CMPB	AL, #'a'		;No - is character lower case
	JAE	4$			;Yes - invalid delimiter
	CMPB	AL, #'Z'		;No - is character upper case
	JBE	6$			;No - valid delimiter
4$:	MOVL	EDX, #misdel#		;Invalid delimiter
	JMP	sear14

;Here with valid delimiter

6$:	MOVB	DL, AL			;Save terminator character
	MOVB	strdel#, AL		;Store the delimiter
	MOVL	EBX, #string#		;Point to string buffer
	MOVB	DH, #STGLEN		;Initialize count
8$:	CALL	getcmc#			;Get next character
	JE	10$			;If end of line
	CALL	makupr#			;Ensure upper case
	CMPB	AL, DL			;Terminator?
	JE	10$			;Yes
	MOVB	[EBX], AL		;No - store in string
	INCL	EBX			;Bump pointer
	DECB	DH			;Reduce count
	JNE	8$			;Continue if not too long
	MOVL	EDX, #toolng#		;Search string too long - complain
	JMP	sear14

;Here at end of search string

10$:	MOVB	AL, #STGLEN		;Get length of string
	SUBB	AL, DH
	JNE	16$			;If not null string

;Here if null search string

12$:	CMPB	strcnt#, #0		;Is there a previous string?
	JNE	sear18			;Yes - go use it
searns:	MOVL	EDX, #nossvd#		;No - complain
sear14:	CALL	dsprsp#			;Display error message on response line
	STC				;Indicate failure
	RET				;And return

;Here if not null string

16$:	MOVB	[EBX], #''''		;Put in a closing quote
	MOVB	1[EBX], #0		;Followed by a null
	MOVB	strcnt#, AL		;Store length

;Here with search string setup - all searches begin here

sear18:	CLRL	EAX			;Reset line counter
	MOVL	slincnt#, EAX
	MOVL	EBX, w_curpnt[ESI]	;Start with current line
	CMPB	fndflg#, #0		;Is this a find search?
	JE	22$			;No
	CMPB	[EBX], #0		;Yes - at end of file now?
	JE	30$			;Yes - fail
	JMP	50$			;Go start search at next line

;Here to start locate search

22$:	MOVL	bgnEBX#, EBX		;Remember where this line is
	MOVB	AL, w_cursorinb[ESI]	;Get cursor position
	CMPB	w_haveline[ESI], #0	;Is current line in the line buffer?
	JE	24$			;No
	MOVB	CL, w_curlincnt[ESI]	;Yes - get length of line
	DECB	CL			;Blank line?
	JE	48$			;Yes - just step to next line
	MOVL	EBX, w_curlinbuf[ESI]	;No
	JMP	26$

;Here if current line not in line buffer

24$:	MOVB	CL, [EBX]		;Get length of this line
	DECB	CL			;Blank line?
	JE	48$			;Yes - just step to next line
	INCL	EBX			;No
26$:	DECB	CL
	SUBB	CL, AL			;See how many characters past cursor
	JBE	48$			;None - start with next line
	MOVB	AH, #0
	ADDL	EBX, EAX		;Point to first character to check
	JMP	34$			;Continue

;Here to start searching next line

28$:	MOVB	CL, [EBX]		;Get length of line
	ORB	CL, CL			;End of file?
	JNE	32$			;No - go on
30$:	MOVL	EDX, #flmsg1#		;Yes - tell him this failed!
	CALL	dsprsp#
	MOVL	EDX, #string#
	CALL	dspstr#			;Display search string
	STC				;Indicate failure
	RET				;And return

;Here if not at end of file

32$:	DECB	CL			;Blank line?
	JE	50$			;Yes - step to next line
	MOVL	bgnEBX#, EBX		;Remember where this line is
34$:	INCL	EBX			;Point to first character in line
	PUSHL	ESI
	MOVL	ESI, #string#		;Point to start of search string
	MOVB	AL, [EBX]		;Compare to string
	CALL	makupr#
	CMPB	AL, [ESI]
	JE	40$			;If match
36$:	CMPB	fndflg#, #0		;Is this a "find" search?
	JNE	46$			;Yes - go step to next line
38$:	DECB	CL			;More in this line?
	JE	46$			;No - go on to the next line
	INCL	EBX			;Yes - bump pointer
	MOVB	AL, [EBX]		;Compare next character
	CALL	makupr#
	CMPB	AL, [ESI]
	JNE	38$			;Continue looking if different
40$:	MOVB	DL, CL			;Match - copy count for line
	MOVB	CH, strcnt#		;Get length of string
	MOVL	savEBX#, EBX		;Remember where we were in the line
42$:	DECB	CH			;At end of string?
	JE	52$			;Yes - we are finished!
	DECB	DL			;No - more left in line?
	JE	44$			;No - continue searching
	INCL	ESI			;Yes - bump string pointer
	INCL	EBX			;Bump line pointer
	MOVB	AL, [EBX]		;Compare
	CALL	makupr#
	CMPB	AL, [ESI]
	JE	42$			;Continue checking if same

;Here if no match within string

44$:	MOVL	EBX, savEBX#		;Restore BX to beginning of this
					;  search
	MOVL	ESI, #string#		;Point to beginning of string
	JMP	36$			;Continue search

;Here if no match at beginning of string

46$:	POPL	ESI
48$:	MOVL	EBX, bgnEBX#		;Point to beginning of this line
50$:	INCL	slincnt#		;Count the line
	MOVZBL	ECX, [EBX]		;Get length of line
	LEAL	EBX, 1[EBX+ECX]		;Advance to next line
	JMP	28$			;Continue

;Here with complete match

52$:	DECL	scount#			;Are we finished?
	JNE	44$			;No - continue searching
	POPL	ESI			;Yes
	MOVL	EAX, savEBX#
	LEAL	EBX, f_filbfr[EDI]
	CMPL	EAX, EBX		;Searching in current line?
	JB	54$			;Yes
	PUSHL	EAX
	CALL	putlinef#
	POPL	EAX
	SUBL	EAX, bgnEBX#		;No - calculate position of string
	DECL	EAX			;  in line
	MOVL	EBX, bgnEBX#		;Point to start of line
	MOVL	ECX, slincnt#		;Get number of lines
	RET				;And return (C and Z are clear here)

;Here if match found in current line

54$:	SUBL	EAX, w_curlinbuf[ESI]	;Calculate position of string in line
	CLRL	ECX			;Indicate did not advance
	RET				;And return (C is clear, Z is set)
.PAGE
	.SBTTL	getrep - Subroutine to parse replacment string

;Subroutine to parse replacment string
;	CALL	getrep
;	C:clr = Normal
;	C:set = Error

getrep::CMPB	strdel#, #0		;Is there a delimiter?
	JNE	4$			;Yes - continue
2$:	CMPB	repcnt#, #-1		;No - is there a replacement string?
	JNE	12$			;Yes - return
getrns::MOVL	EDX, #norsvd#		;No - replacment string not saved
	JMP	sear14			;Print error message and return

;Here with delimiter

4$:	MOVL	EBX, #repstg#		;Get the address of the replacement
					;  string
	MOVB	DH, #0			;Reset character count
6$:	CALL	getcmc#			;Get the next character of the
					;  command string
	JE	8$			;End of line - take as closing
					;  delimiter
	CMPB	AL, strdel#		;Is this the end of the string
	JE	10$			;Yes - continue and close the string
	MOVB	[EBX], AL		;No - store character in the string
	INCL	EBX			;Bump the pointer
	INCB	DH			;Increment count
	CMPB	DH, #STGLEN		;Can we take more?
	JB	6$			;Yes - get next character
	MOVL	EDX, #rtoolg#		;No - replacement string too long
	JMP	sear14			;Complain and return

;Here on end of line

8$:	ORB	DH, DH			;Null string stopped by end of line?
	JE	2$			;Yes - use previous string
10$:	MOVB	repcnt#, DH		;Store length of replacment string
12$:	CLC				;Clear C
	RET				;And return
.PAGE
	.SBTTL	repstr - Subroutine to do replacement after search

;Subroutine to do replacement after search
;	CALL	repstr
;	C:set = Error
;	C:clr = Normal

repstr::MOVB	AL, repcnt#		;Get the length of the replacment
					;  string
	SUBB	AL, strcnt#		;Calculate the diff in string length
	MOVXBL	EAX, AL			;If the lengths are the same, just
	JE	20$			;  make replacement
	MOVZBL	EDX, w_curlincnt[ESI]	;Different lengths - get the old end
	JB	16$			;  of line

;Here if replacement string is longer than search string

	ADDL	f_numchr[EDI], EAX
	ADDL	EAX, EDX		;Calculate the new line length
	JC	10$
	CMPB	AL, #250t
	JB	12$			;Line OK - continue
10$:	SUBL	EAX, EDX
	SUBL	f_numchr[EDI], EAX
	MOVL	EBX, #replong#		;Error - line too long
	CALL	dsprsp#
	STC				;Indicate error
	RET				;And return

;Here if line is not too long

12$:	MOVB	w_curlincnt[ESI], AL	;Store new line count
	MOVZBL	ECX, w_cursorinb[ESI]	;Get the cursor position
	ADDB	CL, strcnt#		;Calculate the end of search string
	SUBL	ECX, EDX		;Calculate number of charcters left
	NOTL	ECX			;Make the number positive
	JREGZ	ECX, 20$		;If found the last thing on the line
	PUSHL	DS			;Not last - must move rest of line
	POPL	ES			;  to make room
	PUSHL	EDI
	PUSHL	ESI
	MOVL	EDI, w_curlinbuf[ESI]
	SUBL	EDI, #2
	MOVL	ESI, EDI
	ADDL	EDI, EAX		;Calculate the new end of line
	ADDL	ESI, EDX		;Caluclate the old end of line
	STD				;Move backwards
	RMOVSB	[EDI], [ESI]		;Adjust tail end of line
	POPL	ESI
	POPL	EDI
	JMP	18$			;Go move in the replacement data

;Here if the replacment string is shorter than the search string

16$:	ADDL	f_numchr[EDI], EAX
	ADDB	w_curlincnt[ESI], AL	;Reduce line length
	MOVZBL	ECX, w_cursorinb[ESI]	;Get the cursor position
	ADDB	CL, strcnt#		;Calculate the end of search string
	SUBL	ECX, EDX		;Calculate number of charcters left
	NEGL	ECX			;Make the number positive
	JZ	20$			;Search found the last thing on the
	PUSHL	DS			;  line
	POPL	ES
	MOVZBL	EAX, w_cursorinb[ESI]
	PUSHL	EDI
	PUSHL	ESI
	MOVL	ESI, w_curlinbuf[ESI]
	ADDL	ESI, EAX
	MOVL	EDI, ESI
	MOVZBL	EAX, strcnt#
	ADDL	ESI, EAX
	MOVZBL	EAX, repcnt#
	ADDL	EDI, EAX
	CLD
	RMOVSB	[EDI], [ESI]		;Move the end of the buffer
	POPL	ESI
	POPL	EDI
18$:	PUSHL	ESI
	CALL	dspnumchars#		;Update number of characters display
	ADDL	ESP, #4

;Here to move in the replacment string

20$:	MOVZBL	ECX, repcnt#		;Get the length of the string
	ORL	ECX, ECX		;Is there a string to be moved?
	JE	30$			;No - update the line and continue
	PUSHL	DS			;Yes - setup for the move
	POPL	ES
	PUSHL	EDI
	PUSHL	ESI
	MOVZBL	EDI, w_cursorinb[ESI]	;Get the cursor position
	ADDL	EDI, w_curlinbuf[ESI]	;Calculate the destination
	MOVL	ESI, #repstg#		;Get address of replacement string
	CLD
	RMOVSB	[EDI], [ESI]		;Replace the text
	POPL	ESI
	POPL	EDI
30$:	CLC				;Make sure C is clear
	RET				;And return
