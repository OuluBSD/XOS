"Usage: wcc386 [options] file [options]\0"
"Options:\0"
"-3r           386 register calling conventions\0"
"-3s           386 stack calling conventions\0"
"-4r           486 register calling conventions\0"
"-4s           486 stack calling conventions\0"
"-5r           Pentium register calling conventions\0"
"-5s           Pentium stack calling conventions\0"
"-6r           Pentium Pro register calling conventions\0"
"-6s           Pentium Pro stack calling conventions\0"
"-aa           allow non const initializers for local aggregates or unions\0"
"-ad[=<file>]  generate make style auto depend file\0"
"-add[=<file>] set source dependancy name in auto depend file\0"
"-adt[=<file>] set make style auto depend target name\0"
"-adhp[=<file>]set default for no header path\0"
"-adbs         force slashes to backward '\\' slashes (auto dep gen)\0"
"-adfs         force slashes to forward '/' slashes (auto dep gen)\0"
"-ai           turn off type checking on static initialization\0"
"-aq           turn off qualifier mismatch warning for const/volatile\0"
"-bc           build target is a console application\0"
"-bd           build target is a dynamic link library (DLL)\0"
"-bg           build target is a GUI application\0"
"-bm           build target is a multi-thread environment\0"
"-br           build with dll run-time library\0"
"-bt=<id>      build target for operating system <id>\0"
"-bw           build target is a default windowing application\0"
"-d<id>[=text] precompilation #define <id> [text]\0"
"-d0           no debugging information\0"
"-d1{+}        line number debugging information\0"
"-d2           full symbolic debugging information\0"
"-d3           full symbolic debugging with unreferenced type names\0"
"-d+           allow extended -d macro definitions\0"
"-db           generate browsing information\0"
"-e=<num>      set limit on number of error messages\0"
"-ecc          set default calling convention to __cdecl\0"
"-ecd          set default calling convention to __stdcall\0"
"-ecf          set default calling convention to __fastcall\0"
"-ecp          set default calling convention to __pascal\0"
"-ecr          set default calling convention to __fortran\0"
"-ecs          set default calling convention to __syscall\0"
"-ecw          set default calling convention to __watcall (default)\0"
"-ee           call epilogue hook routine\0"
"-ef           use full pathnames in error and warning messages\0"
"-ei           force enums to be at least as large as an int\0"
"-em           force enum base type to use minimum integral type\0"
"-en           emit routine names in the code segment\0"
"-ep[=<num>]   call prologue hook routine with <num> stack bytes available\0"
"-eq           do not display error messages (they are still written to a file)\0"
"-et           Pentium profiling\0"
"-ez           generate PharLap EZ-OMF object files\0"
"-fh[=<file>]  use pre-compiled headers\0"
"-fhq[=<file>] do not display pre-compiled header activity warnings\0"
"-fi=<file>    force <file> to be included\0"
"-fo[=<file>]  set object or preprocessor output file name\0"
"-fr[=<file>]  set error file name\0"
"-fti          print informational message when opening include file\0"
"-fp2          generate 287 floating-point code\0"
"-fp3          generate 387 floating-point code\0"
"-fp5          optimize floating-point for Pentium\0"
"-fp6          optimize floating-point for Pentium Pro\0"
"-fpc          calls to floating-point library\0"
"-fpi          inline 80x87 instructions with emulation\0"
"-fpi87        inline 80x87 instructions\0"
"-fpr          generate backward compatible 80x87 code\0"
"-g=<id>       set code group name\0"
"-hc           generate Codeview debugging information\0"
"-hd           generate DWARF debugging information\0"
"-hw           generate Watcom debugging information\0"
"-i=<path>     add another include path\0"
"-j            change char default from unsigned to signed\0"
"-mc           compact memory model (small code/large data)\0"
"-mf           flat memory model (small code/small data assuming CS=DS=SS=ES)\0"
"-ml           large memory model (large code/large data)\0"
"-mm           medium memory model (large code/small data)\0"
"-ms           small memory model (small code/small data)\0"
"-na           disable automatic inclusion of _ialias.h\0"
"-nc=<id>      set code class name\0"
"-nd=<id>      set data segment name\0"
"-nm=<file>    set module name\0"
"-nt=<id>      set name of text segment\0"
"-o{a,b,c,d,e,f[+],h,i,k,l,m,n,o,p,r,s,t,u,x,z} control optimization\0"
"  a           -> relax aliasing constraints\0"
"  b           -> branch prediction\0"
"  c           -> disable <call followed by return> to <jump> optimization\0"
"  d           -> disable all optimizations\0"
"  e[=<num>]   -> expand user functions inline (<num> controls max size)\0"
"  f           -> generate traceable stack frames as needed\0"
"  f+          -> always generate traceable stack frames\0"
"  h           -> enable expensive optimizations\0"
"  i           -> expand intrinsic functions inline\0"
"  k           -> push register saves into flow graph\0"
"  l           -> enable loop optimizations\0"
"  l+          -> enable loop unrolling optimizations\0"
"  m           -> generate inline code for math functions\0"
"  n           -> allow numerically unstable optimizations\0"
"  o           -> continue compilation if low on memory\0"
"  p           -> generate consistent floating-point results\0"
"  r           -> reorder instructions for best pipeline usage\0"
"  s           -> favor code size over execution time in optimizations\0"
"  t           -> favor execution time over code size in optimizations\0"
"  u           -> all functions must have unique addresses\0"
"  x           -> equivalent to -obmiler -s\0"
"  z           -> NULL points to valid memory in the target environment\0"
"-pil          preprocessor ignores #line directive\0"
"-p{c,l,w=<num>} preprocess source file\0"
"  c           -> preserve comments\0"
"  l           -> insert #line directives\0"
"  w=<num>     -> wrap output lines at <num> columns. Zero means no wrap.\0"
"-q            operate quietly\0"
"-r            save/restore segment registers across calls\0"
"-ri           return chars and shorts as ints\0"
"-s            remove stack overflow checks\0"
"-sg           generate calls to grow the stack\0"
"-st           touch stack through SS first\0"
"-tp=<id>      set #pragma on( <id> )\0"
"-u<id>        undefine macro <id>\0"
"-v            output function declarations to .def\0"
"-vcap         VC++ compatibility: alloca allowed in argument lists\0"
"-w=<num>      set warning level number\0"
"-wcd=<num>    warning control: disable warning message <num>\0"
"-wce=<num>    warning control: enable warning message <num>\0"
"-we           treat all warnings as errors\0"
"-wx           set warning level to maximum setting\0"
"-za           disable extensions (i.e., accept only ISO/ANSI C)\0"
"-zc           place const data into the code segment\0"
"-zdf          DS floats i.e. not fixed to DGROUP\0"
"-zdp          DS is pegged to DGROUP\0"
"-zdl          Load DS directly from DGROUP\0"
"-ze           enable extensions (i.e., near, far, export, etc.)\0"
"-zev          enable arithmetic on void derived types\0"
"-zfw          generate FWAIT instructions\0"
"-zff          FS floats i.e. not fixed to a segment\0"
"-zfp          FS is pegged to a segment\0"
"-zgf          GS floats i.e. not fixed to a segment\0"
"-zgp          GS is pegged to a segment\0"
"-zg           generate function prototypes using base types\0"
"-zk0          double-byte character support: Kanji\0"
"-zk0u         translate double-byte Kanji to Unicode\0"
"-zk1          double-byte character support: Traditional Chinese\0"
"-zk2          double-byte character support: Korean\0"
"-zk3          double-byte character support: Simplified Chinese\0"
"-zku=<num>    load UNICODE translate table for specified code page\0"
"-zl           remove default library information\0"
"-zld          remove file dependency information\0"
"-zlf          add default library information to object files\0"
"-zls          remove automatically inserted symbols\0"
"-zm           place each function in separate segment\0"
"-zp=<num>     pack structure members with alignment {1,2,4,8,16}\0"
"-zpw          output warning when padding is added in a struct\0"
"-zq           operate quietly (equivalent to -q)\0"
"-zro          omit floating point rounding calls (non ANSI)\0"
"-zri          inline floating point rounding calls\0"
"-zs           syntax check only\0"
"-zt[=<num>]   set far data threshold (i.e., larger objects go in far memory)\0"
"-zu           SS != DGROUP (i.e., don't assume stack is in your data segment)\0"
"-zw           generate code for Microsoft Windows\0"
"-zz           remove \"@size\" from __stdcall function names (10.0 compatible)\0"
