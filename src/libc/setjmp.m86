	.TITLE	setjmp - ANSI C functions for non-local jumps
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\xmac\xoserr.par
	.INCLUD	XOSINC:\xmac\stdio.par
	.INCLUD	XOSINC:\xmac\setjmp.par

	.STDSEGS

	.PSECT	_TEXT_p

;This function gets its argument in EAX!

	.ENTRY	setjmp, _setjmp
_setjmp:
setjmp:	MOVL	longjmp_EBX[EAX], EBX	;Save the general registers
	MOVL	longjmp_ECX[EAX], ECX
	MOVL	longjmp_EDX[EAX], EDX
	MOVL	longjmp_ESI[EAX], ESI
	MOVL	longjmp_EDI[EAX], EDI
	MOVL	longjmp_EBP[EAX], EBP
	POPL	longjmp_EIP[EAX]	;Save EIP
	MOVL	longjmp_ESP[EAX], ESP	;Save ESP
	PUSHL	longjmp_EIP[EAX]
	MOVW	longjmp_ES[EAX], ES	;Save the segment registers
	MOVW	longjmp_DS[EAX], DS
	MOVW	longjmp_CS[EAX], CS
	MOVW	longjmp_FS[EAX], FS
	MOVW	longjmp_GS[EAX], GS
	MOVW	longjmp_SS[EAX], SS
	CLRL	EAX
	RET

sja_buf=!0
sja_rtn=!4

;This is defined as "aborts" so there is no return address on the stack when
;   it is "called" (actually by JMP longjmp).

	.ENTRY	longjmp
longjmp:MOVL	EAX, sja_buf[ESP]	;Get offset of his buffer
	MOVL	EDX, sja_rtn[ESP]	;Get value to "return"
	TESTL	EDX, EDX
	JNE	2$
	INCL	EDX
2$:	MOVW	SS, longjmp_SS[EAX]	;Restore his stack
	MOVL	ESP, longjmp_ESP[EAX]
	PUSHL	longjmp_EIP[EAX]	;Stack the return address
	PUSHL	EDX			;Save the value to return
	MOVL	EBX, longjmp_EBX[EAX]
	MOVL	ECX, longjmp_ECX[EAX]
	MOVL	ESI, longjmp_ESI[EAX]
	MOVL	EDI, longjmp_EDI[EAX]
	MOVL	EBP, longjmp_EBP[EAX]
	MOVZWL	EDX, longjmp_ES[EAX]
	VERR	DX
	JE	6$
	CLRL	EDX
6$:	MOVL	ES, EDX
	MOVZWL	EDX, longjmp_FS[EAX]
	VERR	DX
	JE	8$
	CLRL	EDX
8$:	MOVL	FS, EDX
	MOVZWL	EDX, longjmp_GS[EAX]
	VERR	DX
	JE	10$
	CLRL	EDX
10$:	MOVL	GS, EDX
	MOVL	EDX, longjmp_EDX[EAX]
	MOVW	DS, longjmp_DS[EAX]

	POPL	EAX			;Restore the value to return
	RET				;"Return"

	.END
