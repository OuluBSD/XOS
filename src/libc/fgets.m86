	.TITLE	fgets - Function to get string from stream
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.PSECT	_TEXT_p

;Function to get text line from an input stream
;	char * fgets(
;	    const char *str,	// Pointer to buffer to receive string
;	    int         size,	// Maximum length for string
;	    FILE       *file);	// Pointer to stream
;  Value returned if NULL if error (errno is set) or the address of the buffer
;    if normal.

;NOTE: This function accepts LF, CR, and CR-LF as line terminators. All three
;      forms are converted to LF when stored in the buffer.

fgs_str =!12t
fgs_size=!16t
fgs_file=!20t

	.ENTRY	fgets
fgets:	PUSHL	EDI
	PUSHL	ESI
	MOVL	EDI, fgs_str[ESP]	;Get address of buffer
	MOVL	ECX, fgs_size[ESP]	;Get maximum size
	DECL	ECX
	MOVL	ESI, fgs_file[ESP]	;Get stream pointer
4$:	DECL	ECX			;Room for another character?
	JS	14$			;No
	PUSHL	ECX			;Yes
	PUSHL	ESI			;Get character
	CALL	fgetc#
	ADDL	ESP, #4
	POPL	ECX
	TESTL	EAX, EAX		;Error?
	JS	12$			;Yes
	CMPB	AL, #LF
	JE	6$
	CMPB	AL, #CR
	JE	16$
	MOVB	[EDI], AL		;Store character
	INCL	EDI
	JMP	4$

;Here at end of the line

6$:	MOVW	[EDI], #LF		;Store LF + null
8$:	MOVL	EAX, fgs_str[ESP]	;Point to the buffer
10$:	POPL	ESI
	POPL	EDI
	RET

;Here if error

12$:	CLRL	EAX
	JMP	10$

;Here if buffer is full

14$:	MOVB	[EDI], #0		;Store null (no LF)
	JMP	8$

;Here if have CR

16$:	PUSHL	ESI			;Get next character
	CALL	fgetc#
	ADDL	ESP, #4
	TESTL	EAX, EAX
	JS	12$
	CMPB	AL, #LF			;Was the CR followed by LF?
	JE	6$			;Yes
	MOVL	iob_ungotten[ESI], EAX	;No - put back the LF
	JMP	6$

	.END
