	.TITLE	_mainmin - Special startup routines for C programs
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR
;;;	.INCLUD XOSINC:\XMAC\CLIBX.PAR

argmsect=!2000000h	;Offset for argument msect during set up

;This routine contains the first code executed when a C program is started
;  after it is loaded.

	.STDSEGS

	.LNKSEG	CODE_s, DATA_s

	.PSECT	_BEGIN_p
_clib_begin::
	.STACK	_clib_stack
	.BLKL	128t		;Stack
_clib_stack:

	.PSECT	_HEAP_p
_clib_heap::

	.PSECT	_DATA_p
_clib_membase::			;These 3 items must be in this order!
	.LONG	_clib_begin	;Offset of start of base msect
_clib_mempnt::
	.LONG	_clib_heap	;Memory allocation pointer
_clib_memtop::
	.LONG	0		;Top of memory offset
_argc::	.LONG	0
_argv::	.LONG	0

maemsg:	.ASCIZ	"? Memory allocation error"{CR,LF}

	.PSECT	_TEXT_p

$$$=!0
FRM mn_numchr, 4t
FRM mn_pntadj, 4t
mn_SIZE=!$$$

;This is the first instruction executed for the process. This version of the
;  startup code does NOT parse the argument string in individual strings for
;  each token. It simply passes the address of the HUM as the single argument
;  to mainalt. It also does NOT set up the standard IO streams. When get here
;  the  registers are set up as follows:
;	c{EDI} = Address of argument data

	.PSECT	_TEXT_p

	.START	_main
	.ENTRY	_mainmin
_cstart_::
_main::
_mainmin::
	PUSHL	#!_DATA_p
	POPL	DS
	ENTER	mn_SIZE, 0		;Allocate stack frame
	PUSHL	#_clib_begin-_STACKSIZE	;Allocate additional memory for our
	PUSHL	#0x0B			;  stack but make it all virtual
	PUSHL	#_STACKSIZE
	CALL	svcMemChange##
	TESTL	EAX, EAX
	JS	$mainmb			;If can't get more space for the stack!
	PUSHL	#_clib_begin		;See how big we are
	PUSHL	#0
	PUSHL	#-1
	CALL	svcMemChange##
	TESTL	EAX, EAX
	JNS	2$			;This should not fail!
$mainmb::
	MOVL	EDI, #maemsg		;Memory allocation failure
mainfl:	PUSHL	#DH_STDTRM
	PUSHL	EDI
	PUSHL	#0
	CALL	svcIoOutString##
	PUSHL	#1
	CALL	svcSchExit##

;Here with memory allocation determined

2$:	ADDL	EAX, #_clib_begin	;Get offset for top
	MOVL	_clib_memtop, EAX	;Remember allocated top of memory
	CMPL	hum_fileaddr[EDI], #0x10000 ;Do we need to fix up the pointers?
	JA	4$			;No
	ADDL	hum_fileaddr[EDI], EDI	;Yes
	ADDL	hum_argsaddr[EDI], EDI
4$:	PUSHL	EDI
	CALL	mainmin#		;Call main program
	PUSHL	EAX			;Return value is exit status
	CALL	svcSchExit##		;Exit

	.END
