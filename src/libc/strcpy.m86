	.TITLE	strcpy - ANSI C function to copy strings
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

;+
; Edit history:
;
;  Date    Who  Description
; -------  ---  -----------
;  1Sep94  FPJ  Optimized code.
; 18Nov94  FPJ  Further optimizations.
;-

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

.MACRO	MOVSEG	dst, src, reg
.IF	NB	{reg}
	MOVL	reg, src
	MOVL	dst, reg
.IFF
	PUSHL	src
	POPL	dst
.ENDC
.ENDM

	.SBTTL	strcpy - ANSI C function to copy strings

;+
; Function: strcpy()
;
; Call:
;
;       PUSHL	<offset of source string>
;	PUSHL	<offset of destination string>
;
;	CALL 	strcpy
;
; Return:
;
;       EAX =  Offset of destination string
;	EBX =  Random
;	ECX =  Random
;	EDX =  Random
;-

arg_dst=!16t
arg_src=!20t

magic1 =! 0x01010101
magic2 =! 0x80808080

	.PSECT	_TEXT_p

	.ENTRY	strcpy

strcpy:	PUSHL	EBX
	PUSHL	EDI
	PUSHL	ESI
	MOVSEG	ES, DS			;Copy DS to ES
	CLD
	MOVL	EDI, arg_dst[ESP]	;Get offset of destination string
	MOVL	ESI, arg_src[ESP]	;Get offset of source string
	MOVL	ECX, #magic1		;Load first magic number
	MOVL	EDX, #magic2		;Load second magic number

; First make sure the destination is longword-aligned - this means
; that may have to initially copy as many as three bytes before we
; can start doing the longword copies, but we have to be careful
; that we don't copy beyond the end of the string.

	MOVL	EAX, [ESI] 		;Load next longword (EAX=n)
	MOVL	EBX, EAX		;EBX = n
	SUBL	EBX, ECX		;EBX = n - magic1
	NOTL	EAX			;EAX = ~n (1's complement)
	ANDL	EBX, EAX		;EBX = (n - magic1) & (~n)
	NOTL	EAX			;EAX = n (so we can store it)
	ANDL	EBX, EDX		;EBX = (n - magic1) & (~n) & magic2
	JNE	30$			;If non-zero, there's a zero byte
					;  (i.e., string is 0-3 bytes long)
; Now align the destination

        MOVL    ECX, EDI                ;Get destination address
        NEGL    ECX                     ;Get 2's complement so that
        ANDL    ECX, #3			;  we can figure no. of bytes
	RMOVSB	[EDI], [ESI]		;Copy 0-3 bytes
	MOVL	ECX, #magic1		;Load first magic number again
	JMP	20$			;Go do first load

; Here to do next store -- the reason this is placed here
; is so that we minimize the amount of branching we do.

10$:	MOVL	[EDI], EAX		;Store next longword
	ADDL	EDI, #4			;Bump to next address
20$:	MOVL	EAX, [ESI] 		;Load next longword (EAX=n)
	ADDL	ESI, #4			;Bump to next address
	MOVL	EBX, EAX		;EBX = n
	SUBL	EBX, ECX		;EBX = n - magic1
	NOTL	EAX			;EAX = ~n (1's complement)
	ANDL	EBX, EAX		;EBX = (n - magic1) & (~n)
	NOTL	EAX			;EAX = n (so we can store it)
	ANDL	EBX, EDX		;EBX = (n - magic1) & (~n) & magic2
	JE	10$			;If zero, we have more to copy
	SUBL	ESI, #4			;Else back up to start of longword

; Here to copy the last 1-4 bytes of the string

30$:	LODSB	[ESI]			;Get the next byte
	STOSB	[EDI]			;And store it
	TESTB	AL, AL			;Zero?
	JNE	30$			;No, so keep looping

	MOVL	EAX, arg_dst[ESP]	;Get address of destination string
	POPL	ESI
	POPL	EDI
	POPL	EBX
	RET

	.END
