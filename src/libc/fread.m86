	.TITLE	fread - Function to read block from IO stream
	.SBTTL	STDC run-time library for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\STDIO.PAR

	.STDSEGS

	.PSECT	_TEXT_p

	.SBTTL	fread - Function to read block from IO stream

;Function to read block from IO stream
;	int fread(
;	    const void *buffer;	// Pointer to buffer
;	    int   size;		/Size of each data item
;	    int   count;	// Number of items to input
;	    FILE *file);	// Stream pointer
;  Value returned is number of items input if normal or -1 if error (errno
;    is set)

$$$=!0
FRM fr_rtn, 4t
FRM fr_cnt, 4t
fr_SIZE=!$$$

fr_bufr=!16t
fr_size=!20t
fr_icnt=!24t
fr_file=!28t

	.ENTRY	fread
fread:	PUSHL	ESI
	PUSHL	EDI
	ENTER	fr_SIZE, 0
	MOVL	errno#, #0
	MOVL	ESI, fr_file[EBP]	;Get stream pointer
	MOVL	EDI, fr_bufr[EBP]	;Get offset of buffer
	MOVL	EAX, fr_icnt[EBP]	;Get number of items to read
	MOVL	fr_rtn[EBP], EAX
	IMULL	EAX, fr_size[EBP]	;Times size of each item
	MOVL	fr_cnt[EBP], EAX
4$:	DECL	fr_cnt[EBP]		;More to do?
	JS	6$			;No - finished
	PUSHL	ESI			;Get byte
	CALL	fgetc#
	ADDL	ESP, #4
	TESTL	EAX, EAX
	JS	10$			;If error
	MOVB	[EDI], AL		;OK - store byte
	INCL	EDI
	JMP	4$

;Here when finished

6$:	MOVL	EAX, fr_rtn[EBP]
8$:	LEAVE
	POPL	EDI
	POPL	ESI
	RET

;Here if error

10$:	CMPL	errno#, #0		;EOF?
	JNE	8$
	MOVL	EDX, fr_rtn[EBP]	;Get total number of items minus 1
	IMULL	EDX, fr_size[EBP]
	DECL	EDX
	SUBL	EDX, fr_cnt[EBP]	;Did we get anything?
	JE	8$			;No - return EOF
	MOVL	EAX, EDX		;Yes
	CLRL	EDX
	IDIVL	fr_size[EBP]		;Get number of whole elements read
	JMP	8$

	.END
