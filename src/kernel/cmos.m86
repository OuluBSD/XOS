	.TITLE	cmos - Routines to handle CMOS memory and RTC

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\PCAT.PAR

	DATA
	CODE

	.SBTTL	svcSysCmos - SVC to read or write CMOS memory

;Here for the svcSysCmos SVC - read or write CMOS memory
;	long addr;		// CMOS address
;	long data;		// Data to write (-1 if reading)
;	value = svcSysCmos(addr, data);
;  Value returned is value read or written (high 24 bits 0) if normal or
;    negative error code if error

psvcSysCmos::
	PUSHL	knlTda+tdaArg1#
	CMPL	knlTda+tdaArg2#, #0	;Want to write?
	JS	4$			;Yes
	CALL	sysSysReadCmos		;No
	RET

;Here to write

4$:	PUSHL	knlTda+tdaArg2#
	CALL	sysSysWriteCmos
	MOVZBL	EAX, knlTda+tdaArg1#
	RET
.PAGE
;Function to write cmos memory
;	c(AL) = CMOS offset
;	c(DL) = Value to write
;	CALL	knlWriteCmos
;	c(AL) = Value written

;	void sysSysWriteCmos(
;	    long addr,		// CMOS address
;	    long val);		// Value to write (8-bits)

wcm_addr=!12t
wcm_val =!8

sysSysWriteCmos::
	PUSHF				;Save current interrupt state
	CLI				;No interrupts here
	MOVL	EAX, wcm_addr[ESP]
	ANDL	EAX, #0x7F		;Make sure NMIs stay enabled
	OUTB	P_CLKADDR		;Set offset
	MOVL	ECX, #5			;Wait a bit
	CALL	knlSDelay#
	MOVL	EAX, wcm_val[ESP]	;Get value to write
	OUTB	P_CLKDATA		;Write it
	MOVB	AL, #0x1A		;Put offset to default value
	OUTB	P_CLKADDR
	POPF				;Interrupts are OK now
	RET	8			;All done here


;Function to read cmos memory
;	c(AL) = CMOS offset
;	CALL	knlReadCmos
;	c(AL) = Contents

;	long sysSysReadCmos(
;	    long addr);

rcm_addr=!8

sysSysReadCmos::
	PUSHF				;Save current interrupt state
	CLI				;No interrupts here
	MOVL	EAX, rcm_addr[ESP]
	ANDL	EAX, #0x7F		;Make sure NMIs stay enabled
	OUTB	P_CLKADDR		;Set offset
	MOVL	ECX, #5			;Wait a bit
	CALL	knlSDelay#
	CLRL	EAX
	INB	P_CLKDATA		;Read the contents
	PUSHL	EAX
	MOVB	AL, #0x1A		;Set offset to default value
	OUTB	P_CLKADDR
	POPL	EAX
	POPF				;Interrupts are OK now
	RET	4			;All done here
.PAGE
;Subroutine to get date and time from the CMOS RTC
;	c{EDI} = Address of date/time structure
;	CALL	gtrtc
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{EAX} = 0

gtrtc::	PUSHL	EDI
	PUSHL	#18t			;Make sure buffer is writable
	CALL	sysIoBufrCheck#
	TESTL	EAX, EAX
	JS	10$			;If error
	CLD
	CLRL	EAX			;Store 0 in milliseconds field
	STOSW	[EDI]
	MOVL	ESI, #rtctbl
	CLI				;No interrupts here
	MOVB	AL, #0Ah		;Point to status register
	OUTB	P_CLKADDR
	MOVL	ECX, #5
	CALL	knlSDelay#
	INB	P_CLKDATA		;Read the register
	TESTB	AL, #80h		;Is data available now?
	JNE	12$.S			;No - fail!
	MOVL	ECX, #7
2$:	LODSB	[ESI]			;Get RTC register number number
	OUTB	P_CLKADDR		;Set it
	PUSHL	ECX
	MOVL	ECX, #5
	CALL	knlSDelay#
	POPL	ECX
	INB	P_CLKDATA		;Read data
	MOVB	BL, AL			;Convert BCD value to binary
	ANDB	BL, #0F			;Get low digit
	SHRB	AL, #4			;Get high digit
	MULB	knlLit10#
	ADDB	AL, BL
	MOVB	AH, #0
	STOSW	[EDI]			;Store data
	LOOP	ECX, 2$			;Continue if more to read
	MOVB	AL, #1Ah		;Put offset to default value
	OUTB	P_CLKADDR
	STI				;Interrupts are OK now
	CMPW	-4[EDI], #80t		;Before 1980?
	JAE	4$			;No
	ADDW	-4[EDI], #100t		;Yes - make it after 2000!
4$:	ADDW	-4[EDI], #1900t		;Adjust year value
	MOVZWL	EAX, -2[EDI]		;Get day of week value
	DECL	EAX			;Adjust it (is should be 1-7, we need
	JS	6$			;  0-6)
	CMPL	EAX, #6			;Is it a legal value?
	JBE	8$			;Yes
6$:	CLRL	EAX			;No - set it to 0!
8$:	MOVW	-2[EDI], AX		;Store adjusted value


	CLRL	EAX			;Store 0 in day of year field
	STOSW	[EDI]
10$:	RET				;Return 0

;Here if CMOS clock is doing an update cycle - in this case we fail with a
;  device busy error - the caller should retry this error after a delay of
;  a few milliseconds

12$:	STI
	MOVL	EAX, #ER_BUSY
	STC
	RET
.PAGE
;Subroutine to set date and time in the CMOS RTC
;	c{EDI} = Address of date/time structure
;	CALL	strtc
;	C:set = Error
;	  c{EAX} = Error code
;	C:clr = Normal
;	  c{EAX} = 0

strtc::	MOVL	ESI, #rtctbl
	CLD
	CLI				;No interrupts here
	MOVB	AL, #0x0B		;Set the "set" bit
	OUTB	P_CLKADDR
	MOVL	ECX, #5
	CALL	knlSDelay#
	MOVB	AL, #0x82
	OUTB	P_CLKDATA
	MOVL	ECX, #6
4$:	LODSB	[ESI]			;Get RTC register number number
	OUTB	P_CLKADDR		;Set it
	PUSHL	ECX
	MOVL	ECX, #5
	CALL	knlSDelay#
	POPL	ECX
	ADDL	EDI, #2			;Bump pointer
	IFFAULT	8$
	MOVZWL	EAX, [EDI]		;Get data value
	CMPL	EAX, #100t		;More than 100?
	JB	6$			;No
	CLRL	EDX			;Yes - get value mod 100
	DIVL	lit100#
	MOVL	EAX, EDX
6$:	AAM				;Seperate into two digits
	SHLB	AH, #4
	ORB	AL, AH			;Merge digits into BCD value
	OUTB	P_CLKDATA		;Store data in the clock
	LOOP	ECX, 4$			;Continue if more to set
	MOVL	ECX, #5
	CALL	knlSDelay#
	MOVB	AL, #06h		;Set RTC register number number
	OUTB	P_CLKADDR		;  for day of week
	MOVL	ECX, #5
	CALL	knlSDelay#
	IFFAULT	8$
	MOVZWL	EAX, 2[EDI]		;Get day of week (0-6)
	INCL	EAX			;Adjust it to be 1-7
	OUTB	P_CLKDATA		;Store data in the clock
	JMP	$+2
	MOVB	AL, #0x0B		;Clear the "set" bit
	OUTB	P_CLKADDR
	MOVL	ECX, #5
	CALL	knlSDelay#
	MOVB	AL, #0x02
	OUTB	P_CLKDATA
	MOVL	ECX, #5
	CALL	knlSDelay#
	MOVB	AL, #0x1A		;Set offset to default value
	OUTB	P_CLKADDR
	STI				;Interrupts are OK now
	CLRL	EAX			;Return 0
	RET

;Here if address error with interrupts disabled

	FAULTHDR
8$:	STI
	JMP	knlRtnAdrEr#
.PAGE
	.SBTTL	Data

	DATA

;Table which gives offsets of RTC registers which correspond to date/time
;  structure elements

rtctbl:	.BYTE	0		;Seconds
	.BYTE	2		;Minutes
	.BYTE	4		;Hours
	.BYTE	7		;Day of month
	.BYTE	8		;Month
	.BYTE	9		;Year
	.BYTE	6		;Day of week

	END
