//++++
// This software is in the public domain.  It may be freely copied and used
// for whatever purpose you see fit, including commerical uses.  Anyone
// modifying this software may claim ownership of the modifications, but not
// the complete derived code.  It would be appreciated if the authors were
// told what this software is being used for, but this is not a requirement.

//   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
//   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
//   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
//   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//----

#include <xos.h>
#include <xosx.h>
#include <xossvc.h>
#include <xoserr.h>
#include <ctype.h>

// Environment strings are implimented completely in user space. The are stored
//   in the same msect used to pass arguments to a process. 

// Environment strings can be defined at the current process level, at the
//   session level (assuming that the session process handles the VECT_SETENV
//   signal) and at system level.


//***********************************************************
// Function: svcSysGetAllEnv - Impliments the svcSysGetAllEnv
//		SVC to return all environment strings
// Returned: Total length of the string returned if normal or
//		a negative XOS error code if error
//***********************************************************

XOSSVC svcSysGetAllEnv(
	char *buffer,
	long  length)
{
	buffer = buffer;
	length = length;

	return (ER_NIYT);
}


//***********************************************************
// Function: svcSysGetEnv - Impliments the svcSysGetEnv SVC
//		to return a specified environment string
// Returned: Total length of the string returned if normal or
//		a negative XOS error code if error
//***********************************************************

XOSSVC svcSysGetEnv(
	char  *name,	// Name to search for (no wild-card characters)
	char **pstr)	// Address of pointer to receive address of
				//   the environment string
{
	name = name;
	pstr = pstr;

	*pstr = "";
	return (0);
}


//***********************************************************
// Function: svcSysFindEnv - Impliments the svcSysFindEnv SCV
//		to return the specified environment string -
//		wild-card searchs are allowed
// Returned: Total length of the string returned if normal or
//		a negative XOS error code if error
//***********************************************************

XOSSVC svcSysFindEnv(
	long  level,	// Level: (bits 14 and 15 determine format)
				//   00 = Process ID (all 0 means self)
				//   01 = Low 8 bits gives offset up from
				//	    current process (rest ignored)
				//   10 = Low 8 bits gives offset down from
				//	    session process (rest ignored)
				//   11 = System level (rest ignored)
	char *name,		// Address of name to search for (may contain
				//   wild-card characters)
	char *found,	// Address of buffer to receive found name
				//   (must be at least 32 bytes)
	char **pstr,	// Address of pointer to receive address of
			//   the environment string
	long *skip)	// Address of skip count value (may be null)
{
	level = level;
	name = name;
	found = found;
	pstr = pstr;
	skip = skip;

	return (ER_NTDEF);
}


//************************************************************
// Function: svcSysDefEnv - Impliments the svcSysDefEnv SVC to
//		define an environment string
// Returned: 0 if normal or a negative XOS error code if error
//************************************************************

XOSSVC svcSysDefEnv(
	long  level,	// 0 = This process
			// 1 = Session process (session process must
			//     be able to process a VECT_SETENV signal)
			// 2 = System level
	char *name,	// Address of name to search for
	char *define)	// Address of defination string
{
	level = 0;
	name = 0;
	define = 0;

	return (ER_NIYT);
}
