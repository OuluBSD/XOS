	.TITLE	trmgraph - Terminal function routines for XOS

;++++
; This software is in the public domain.  It may be freely copied and used
; for whatever purpose you see fit, including commerical uses.  Anyone
; modifying this software may claim ownership of the modifications, but not
; the complete derived code.  It would be appreciated if the authors were
; told what this software is being used for, but this is not a requirement.

;   THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR
;   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
;   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
;   OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
;   TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;   USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;----

	.PROC	80486
	.INCLUD	XOSINC:\XMAC\XOS.PAR
	.INCLUD	XOSINC:\XMAC\XOSX.PAR
	.INCLUD	XOSINC:\XMAC\XOSERR.PAR
	.INCLUD	XOSINC:\XMAC\XOSTRM.PAR
	.INCLUD	XOSINC:\XMAC\XOSXTRM.PAR

	CODE

	.SBTTL	svcTrmGSetCurPat - Set graphics cursor pattern

;Here for the svcTrmGSetCurPat SVC - Set graphics cursor pattern
;	long svcTrmGSetCurPat(
;	    long  handle,	// Device handle
;	    long  type,		// Cursor type
;	    long  widhgh,	// Width of cursor pattern + 0x10000 * height
;	    			//     of cursor pattern
;	    long  xyhot,	// X position of hot spot + 0x10000 * Y
;	    			//   position of hot spot
;	    uchar *pattern,	// Address of pattern map
;	    uchar *mask);	// Address of mask map
;  Value returned is 0 if normal or negative error code if error

psvcTrmGSetCurPat::

	CRASH	????

	ORB	knlTda+tdaArg7#, #03
	ORB	knlTda+tdaArg9#, #03
	CALL	sysTrmGetDcb#		;Get DCB and TDB
	TESTL	EAX, EAX
	JS	4$
	MOVL	ESI, knlTda+tdaAdb#
	CMPL	knlTda+tdaArg2#, #1t	;Make sure type is right
	JNE	knlBadValue#
	IFFAULT	knlRtnAdrEr#
	LFSL	EBX, knlTda+tdaArg8#	;Get address of the pattern map
	IFFAULT	knlRtnAdrEr#
	LGSL	EDX, knlTda+tdaArg10#	;Get address of the mask map
	MOVB	AL, knlTda+tdaArg3#	;Get width
	MOVB	AH, knlTda+tdaArg4#	;Get height
	MOVB	CL, knlTda+tdaArg5#	;Get X position of hot spot
	MOVB	CH, knlTda+tdaArg6#	;Get Y position of hot spot
	MOVL	EBP, tdb_ddisp[ESI]	;Dispatch to driver for this function
	JMPIL	tfx_setgcurpat[EBP]

4$:	RET

;Here for the svcTrmGSetCurCol SVC - Set graphics cursor colors
;	long svcTrmGSetCurCol(
;	    long  handle,	// Device handle
;	    long  number,	// Number of colors
;	    long *colors);	// Color values
;  Value returned is 0 if normal or negative error code if error

psvcTrmGSetCurCol::
	ORB	knlTda+tdaArg3#, #03

	CALL	sysTrmGetDcb#		;Get DCB and TDB
	TESTL	EAX, EAX
	JS	4$
	MOVL	ESI, knlTda+tdaAdb#
	MOVL	ECX, knlTda+tdaArg2#	;Get number of colors
	IFFAULT	knlRtnAdrEr#
	LESL	EBX, knlTda+tdaArg4#	;Get address of the color array
	MOVL	EAX, tdb_ddisp[ESI]	;Dispatch to driver for this function
	JMPIL	tfx_setgcurcol[EAX]

;Here for the svcTrmGSetCurPos SVC - Set graphics cursor position
;	long handle;		// Device handle
;	long func;		// Function:
;				//   Bit 0: 0 = Disable, cursor
;				//          1 = Enable cursor
;				//   Bit 1: 0 = Do not change position
;				//          1 = Set new postion
;	long xpos;		// X position
;	long ypos;		// Y position
;	rtn = svcTrmGSetCurPos(handle, func, xpos, ypos);
;  Value returned is 0 if normal or negative error code if error

psvcTrmGSetCurPos::
	CALL	sysTrmGetDcb#		;Get DCB and TDB
	TESTL	EAX, EAX
	JS	4$
	MOVL	ESI, knlTda+tdaAdb#
	MOVL	EAX, knlTda+tdaArg2#	;Get function bits
	MOVL	ECX, knlTda+tdaArg3#	;Get X position
	MOVL	EDX, knlTda+tdaArg4#	;Get Y position
	MOVL	EBX, tdb_ddisp[ESI]	;Dispatch to driver for this function
	JMPIL	tfx_setgcurpos[EBX]

;Here for the svcTrmGGetCurPos SVC - Get graphics cursor position
;	long svcTrmGGetCurPos(
;	    long handle,	// Device handle
;	    long values[2]);	// Array to receive values
;  Value returned is 0 if cursor disabled, 1 if cursor enabled, or negative
;    error code if error

psvcTrmGGetCurPos::
	CALL	sysTrmGetDcb#		;Get DCB and TDB
	TESTL	EAX, EAX
	JS	4$
	MOVL	ESI, knlTda+tdaAdb#
	MOVL	ECX, knlTda+tdaArg2#	;Get number of colors
	IFFAULT	knlRtnAdrEr#
	LESL	EBX, knlTda+tdaArg3#	;Get address of the values array
	MOVL	EAX, tdb_ddisp[ESI]	;Dispatch to driver for this function
	JMPIL	tfx_getgcurpos[EAX]

	END
